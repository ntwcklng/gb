// Generated by CoffeeScript 1.3.3
$.noConflict();
jQuery(document).ready(function ($) {
  (function () {
  $.widget('ncri.hallohtml', {
    options: {
      editable: null,
      toolbar: null,
      uuid: '',
      lang: 'en',
      dialogOpts: {
        autoOpen: false,
        width: 600,
        height: 'auto',
        modal: false,
        resizable: true,
        draggable: true,
        dialogClass: 'htmledit-dialog'
      },
      dialog: null,
      buttonCssClass: null
    },
    translations: {
      en: {
        title: 'Edit HTML',
        update: 'Update'
      },
      de: {
        title: 'HTML bearbeiten',
        update: 'Aktualisieren'
      }
    },
    texts: null,
    populateToolbar: function ($toolbar) {
      var $buttonHolder, $buttonset, id, widget;
      widget = this;
      this.texts = this.translations[this.options.lang];
      this.options.toolbar = $toolbar;
      this.options.dialog = $('<div>').attr('id', '' + this.options.uuid + '-htmledit-dialog');
      $buttonset = $('<span>').addClass(widget.widgetName);
      id = '' + this.options.uuid + '-htmledit';
      $buttonHolder = $('<span>');
      $buttonHolder.hallobutton({
        label: this.texts.title,
        icon: 'icon-list-alt',
        editable: this.options.editable,
        command: null,
        queryState: false,
        uuid: this.options.uuid,
        cssClass: this.options.buttonCssClass
      });
      $buttonset.append($buttonHolder);
      this.button = $buttonHolder;
      this.button.click(function () {
        if (widget.options.dialog.dialog('isOpen')) {
          widget._closeDialog();
        } else {
          widget._openDialog();
        }
        return false;
      });
      this.options.editable.element.on('hallodeactivated', function () {
        return widget._closeDialog();
      });
      $toolbar.append($buttonset);
      this.options.dialog.dialog(this.options.dialogOpts);
      return this.options.dialog.dialog('option', 'title', this.texts.title);
    },
    _openDialog: function () {
      var $editableEl, html, widget, xposition, yposition,
        _this = this;
      widget = this;
      $editableEl = $(this.options.editable.element);
      xposition = $editableEl.offset().left + $editableEl.outerWidth() + 10;
      yposition = this.options.toolbar.offset().top - $(document).scrollTop();
      this.options.dialog.dialog('option', 'position', [xposition, yposition]);
      this.options.editable.keepActivated(true);
      this.options.dialog.dialog('open');
      this.options.dialog.on('dialogclose', function () {
        $('label', _this.button).removeClass('ui-state-active');
        _this.options.editable.element.focus();
        return _this.options.editable.keepActivated(false);
      });
      this.options.dialog.html($('<textarea>').addClass('html_source'));
      html = this.options.editable.element.html();
      this.options.dialog.children('.html_source').val(html);
      this.options.dialog.prepend($('<button>' + this.texts.update + '</button>'));
      return this.options.dialog.on('click', 'button', function () {
        html = widget.options.dialog.children('.html_source').val();
        widget.options.editable.element.html(html);
        widget.options.editable.element.trigger('change');
        return false;
      });
    },
    _closeDialog: function () {
      return this.options.dialog.dialog('close');
    }
  });

  (function (jQuery) {
    return jQuery.widget('IKS.hallolists', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        lists: {
          ordered: true,
          unordered: true
        },
        buttonCssClass: null
      },
      populateToolbar: function (toolbar) {
        var buttonize, buttonset,
          _this = this;
        buttonset = jQuery('<span class="' + this.widgetName + '"></span>');
        buttonize = function (type, label) {
          var buttonElement;
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: label,
            command: 'insert' + type + 'List',
            icon: 'icon-list-' + (label.toLowerCase()),
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        if (this.options.lists.ordered) {
          buttonize('Ordered', 'OL');
        }
        if (this.options.lists.unordered) {
          buttonize('Unordered', 'UL');
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloformat', {
      options: {
        editable: null,
        uuid: '',
        formattings: {
          bold: true,
          italic: true,
          strikeThrough: false,
          underline: false
        },
        buttonCssClass: null
      },
      populateToolbar: function (toolbar) {
        var buttonize, buttonset, enabled, format, widget, _ref,
          _this = this;
        widget = this;
        buttonset = jQuery('<span class="' + widget.widgetName + '"></span>');
        buttonize = function (format) {
          var buttonHolder;
          buttonHolder = jQuery('<span></span>');
          buttonHolder.hallobutton({
            label: format,
            editable: _this.options.editable,
            command: format,
            uuid: _this.options.uuid,
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonHolder);
        };
        _ref = this.options.formattings;
        for (format in _ref) {
          enabled = _ref[format];
          if (!enabled) {
            continue;
          }
          buttonize(format);
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.hallolink', {
      options: {
        editable: null,
        uuid: '',
        link: true,
        image: true,
        defaultUrl: 'http://',
        dialogOpts: {
          autoOpen: false,
          width: 540,
          height: 95,
          title: 'Enter Link',
          buttonTitle: 'Insert',
          buttonUpdateTitle: 'Update',
          modal: true,
          resizable: false,
          draggable: false,
          dialogClass: 'hallolink-dialog'
        },
        buttonCssClass: null
      },
      populateToolbar: function (toolbar) {
        var butTitle, butUpdateTitle, buttonize, buttonset, dialog, dialogId, dialogSubmitCb, isEmptyLink, urlInput, widget,
          _this = this;
        widget = this;
        dialogId = '' + this.options.uuid + '-dialog';
        butTitle = this.options.dialogOpts.buttonTitle;
        butUpdateTitle = this.options.dialogOpts.buttonUpdateTitle;
        dialog = jQuery('<div id="' + dialogId + '">        <form action="#" method="post" class="linkForm">          <input class="url" type="text" name="url"            value="' + this.options.defaultUrl + '" />          <input type="submit" id="addlinkButton" value="' + butTitle + '"/>        </form></div>');
        urlInput = jQuery('input[name=url]', dialog).focus(function (e) {
          return this.select();
        });
        isEmptyLink = function (link) {
          if ((new RegExp(/^\s*$/)).test(link)) {
            return true;
          }
          if (link === widget.options.defaultUrl) {
            return true;
          }
          return false;
        };
        dialogSubmitCb = function (event) {
          var link, selectionStart;
          event.preventDefault();
          link = urlInput.val();
          widget.options.editable.restoreSelection(widget.lastSelection);
          if (isEmptyLink(link)) {
            selectionStart = widget.lastSelection.startContainer;
            if (widget.lastSelection.collapsed) {
              widget.lastSelection.setStartBefore(selectionStart);
              widget.lastSelection.setEndAfter(selectionStart);
              window.getSelection().addRange(widget.lastSelection);
            }
            document.execCommand('unlink', null, '');
          } else {
            if (!(/:\/\//.test(link)) && !(/^mailto:/.test(link))) {
              link = 'http://' + link;
            }
            if (widget.lastSelection.startContainer.parentNode.href === void 0) {
              document.execCommand('createLink', null, link);
            } else {
              widget.lastSelection.startContainer.parentNode.href = link;
            }
          }
          widget.options.editable.element.trigger('change');
          widget.options.editable.removeAllSelections();
          dialog.dialog('close');
          return false;
        };
        dialog.find('input[type=submit]').click(dialogSubmitCb);
        buttonset = jQuery('<span class="' + widget.widgetName + '"></span>');
        buttonize = function (type) {
          var button, buttonHolder, id;
          id = '' + _this.options.uuid + '-' + type;
          buttonHolder = jQuery('<span></span>');
          buttonHolder.hallobutton({
            label: 'Link',
            icon: 'icon-link',
            editable: _this.options.editable,
            command: null,
            queryState: false,
            uuid: _this.options.uuid,
            cssClass: _this.options.buttonCssClass
          });
          buttonset.append(buttonHolder);
          button = buttonHolder;
          button.on('click', function (event) {
            var button_selector, selectionParent;
            widget.lastSelection = widget.options.editable.getSelection();
            urlInput = jQuery('input[name=url]', dialog);
            selectionParent = widget.lastSelection.startContainer.parentNode;
            if (!selectionParent.href) {
              urlInput.val(widget.options.defaultUrl);
              jQuery(urlInput[0].form).find('input[type=submit]').val(butTitle);
            } else {
              urlInput.val(jQuery(selectionParent).attr('href'));
              button_selector = 'input[type=submit]';
              jQuery(urlInput[0].form).find(button_selector).val(butUpdateTitle);
            }
            widget.options.editable.keepActivated(true);
            dialog.dialog('open');
            dialog.on('dialogclose', function () {
              jQuery('label', buttonHolder).removeClass('ui-state-active');
              widget.options.editable.element.focus();
              return widget.options.editable.keepActivated(false);
            });
            return false;
          });
          return _this.element.on('keyup paste change mouseup', function (event) {
            var nodeName, start;
            start = jQuery(widget.options.editable.getSelection().startContainer);
            if (start.prop('nodeName')) {
              nodeName = start.prop('nodeName');
            } else {
              nodeName = start.parent().prop('nodeName');
            }
            if (nodeName && nodeName.toUpperCase() === 'A') {
              jQuery('label', button).addClass('ui-state-active');
              return;
            }
            return jQuery('label', button).removeClass('ui-state-active');
          });
        };
        if (this.options.link) {
          buttonize('A');
        }
        if (this.options.link) {
          toolbar.append(buttonset);
          buttonset.hallobuttonset();
          return dialog.dialog(this.options.dialogOpts);
        }
      }
    });
  })(jQuery);

  $.widget('ncri.hallo-image-insert-edit', {
    options: {
      editable: null,
      toolbar: null,
      uuid: '',
      insert_file_dialog_ui_url: null,
      lang: 'en',
      dialogOpts: {
        autoOpen: false,
        width: 560,
        height: 'auto',
        modal: false,
        resizable: true,
        draggable: true,
        dialogClass: 'insert-image-dialog'
      },
      dialog: null,
      buttonCssClass: null
    },
    translations: {
      en: {
        title_insert: 'Insert Image',
        title_properties: 'Image Properties',
        insert: 'Insert',
        chage_image: 'Change Image:',
        source: 'URL',
        width: 'Width',
        height: 'Height',
        alt: 'Alt Text',
        padding: 'Padding',
        float: 'Float',
        float_left: 'left',
        float_right: 'right',
        float_none: 'No'
      },
      de: {
        title_insert: 'Bild einfügen',
        title_properties: 'Bildeigenschaften',
        insert: 'Einfügen',
        chage_image: 'Bild ändern:',
        source: 'URL',
        width: 'Breite',
        height: 'Höhe',
        alt: 'Alt Text',
        padding: 'Padding',
        float: 'Float',
        float_left: 'Links',
        float_right: 'Rechts',
        float_none: 'Nein'
      }
    },
    texts: null,
    dialog_image_selection_ui_loaded: false,
    $image: null,
    populateToolbar: function ($toolbar) {
      var $buttonHolder, $buttonset, dialog_html, widget;
      widget = this;
      this.texts = this.translations[this.options.lang];
      this.options.toolbar = $toolbar;
      dialog_html = "<div id='hallo_img_properties'></div>";
      if (this.options.insert_file_dialog_ui_url) {
        dialog_html += "<div id='hallo_img_file_select_ui'></div>";
      }
      this.options.dialog = $('<div>').attr('id', '' + this.options.uuid + '-insert-image-dialog').html(dialog_html);
      $buttonset = $('<span>').addClass(this.widgetName);
      $buttonHolder = $('<span>');
      $buttonHolder.hallobutton({
        label: this.texts.title_insert,
        icon: 'icon-picture',
        editable: this.options.editable,
        command: null,
        queryState: false,
        uuid: this.options.uuid,
        cssClass: this.options.buttonCssClass
      });
      $buttonset.append($buttonHolder);
      this.button = $buttonHolder;
      this.button.click(function () {
        if (widget.options.dialog.dialog('isOpen')) {
          widget._closeDialog();
        } else {
          widget.lastSelection = widget.options.editable.getSelection();
          widget._openDialog();
        }
        return false;
      });
      this.options.editable.element.on('halloselected, hallounselected', function () {
        if (widget.options.dialog.dialog('isOpen')) {
          return widget.lastSelection = widget.options.editable.getSelection();
        }
      });
      this.options.editable.element.on('hallodeactivated', function () {
        return widget._closeDialog();
      });
      $(this.options.editable.element).on('click', 'img', function (e) {
        widget._openDialog($(this));
        return false;
      });
      this.options.editable.element.on('halloselected', function (event, data) {
        var toolbar_option;
        toolbar_option = widget.options.editable.options.toolbar;
        if (toolbar_option === 'halloToolbarContextual' && $(data.originalEvent.target).is('img')) {
          $toolbar.hide();
          return false;
        }
      });
      $toolbar.append($buttonset);
      return this.options.dialog.dialog(this.options.dialogOpts);
    },
    _openDialog: function ($image) {
      var $editableEl, widget, xposition, yposition,
        _this = this;
      this.$image = $image;
      widget = this;
      $editableEl = $(this.options.editable.element);
      xposition = $editableEl.offset().left + $editableEl.outerWidth() + 10;
      if (this.$image) {
        yposition = this.$image.offset().top - $(document).scrollTop();
      } else {
        yposition = this.options.toolbar.offset().top - $(document).scrollTop();
      }
      this.options.dialog.dialog('option', 'position', [xposition, yposition]);
      this.options.editable.keepActivated(true);
      this.options.dialog.dialog('open');
      if (this.$image) {
        this.options.dialog.dialog('option', 'title', this.texts.title_properties);
        $(document).keyup(function (e) {
          if (e.keyCode === 46 || e.keyCode === 8) {
            $(document).off();
            widget._closeDialog();
            widget.$image.remove();
            widget.$image = null;
          }
          return e.preventDefault();
        });
        this.options.editable.element.on('click', function () {
          widget.$image = null;
          return widget._closeDialog();
        });
      } else {
        this.options.dialog.children('#hallo_img_properties').hide();
        this.options.dialog.dialog('option', 'title', this.texts.title_insert);
        if ($('#hallo_img_file_select_title').length > 0) {
          $('#hallo_img_file_select_title').text('');
        }
      }
      this._load_dialog_image_properties_ui();
      this.options.dialog.on('dialogclose', function () {
        var scrollbar_pos;
        $('label', _this.button).removeClass('ui-state-active');
        scrollbar_pos = $(document).scrollTop();
        _this.options.editable.element.focus();
        $(document).scrollTop(scrollbar_pos);
        return _this.options.editable.keepActivated(false);
      });
      if (this.options.insert_file_dialog_ui_url && !this.dialog_image_selection_ui_loaded) {
        this.options.dialog.on('click', '.reload_link', function () {
          widget._load_dialog_image_selection_ui();
          return false;
        });
        this.options.dialog.on('click', '.file_preview img', function () {
          var new_source;
          if (widget.$image) {
            new_source = $(this).attr('src').replace(/-thumb/, '');
            widget.$image.attr('src', new_source);
            $('#hallo_img_source').val(new_source);
          } else {
            widget._insert_image($(this).attr('src').replace(/-thumb/, ''));
          }
          return false;
        });
        return this._load_dialog_image_selection_ui();
      }
    },
    _insert_image: function (source) {
      this.options.editable.restoreSelection(this.lastSelection);
      document.execCommand('insertImage', null, source);
      this.options.editable.element.trigger('change');
      this.options.editable.removeAllSelections();
      return this._closeDialog();
    },
    _closeDialog: function () {
      return this.options.dialog.dialog('close');
    },
    _load_dialog_image_selection_ui: function () {
      var widget;
      widget = this;
      return $.ajax({
        url: this.options.insert_file_dialog_ui_url,
        success: function (data, textStatus, jqXHR) {
          var $properties, file_select_title, t;
          file_select_title = '';
          $properties = widget.options.dialog.children('#hallo_img_properties');
          if ($properties.is(':visible')) {
            file_select_title = widget.texts.change_image;
          }
          t = "<div id='hallo_img_file_select_title'>" + file_select_title + '</div>';
          widget.options.dialog.children('#hallo_img_file_select_ui').html(t + data);
          return widget.dialog_image_selection_ui_loaded = true;
        },
        beforeSend: function () {
          return widget.options.dialog.children('#hallo_img_file_select_ui').html('<div class="hallo_insert_file_loader"></div>');
        }
      });
    },
    _load_dialog_image_properties_ui: function () {
      var $img_properties, button, height, html, widget, width;
      widget = this;
      $img_properties = this.options.dialog.children('#hallo_img_properties');
      if (this.$image) {
        width = this.$image.is('[width]') ? this.$image.attr('width') : '';
        height = this.$image.is('[height]') ? this.$image.attr('height') : '';
        html = this._property_input_html('source', this.$image.attr('src'), {
          label: this.texts.source
        }) + this._property_input_html('alt', this.$image.attr('alt') || '', {
          label: this.texts.alt
        }) + this._property_row_html(this._property_input_html('width', width, {
          label: this.texts.width,
          row: false
        }) + this._property_input_html('height', height, {
          label: this.texts.height,
          row: false
        })) + this._property_input_html('padding', this.$image.css('padding'), {
          label: this.texts.padding
        }) + this._property_row_html(this._property_cb_html('float_left', this.$image.css('float') === 'left', {
          label: this.texts.float_left,
          row: false
        }) + this._property_cb_html('float_right', this.$image.css('float') === 'right', {
          label: this.texts.float_right,
          row: false
        }) + this._property_cb_html('unfloat', this.$image.css('float') === 'none', {
          label: this.texts.float_none,
          row: false
        }), this.texts.float);
        $img_properties.html(html);
        $img_properties.show();
      } else {
        if (!this.options.insert_file_dialog_ui_url) {
          $img_properties.html(this._property_input_html('source', '', {
            label: this.texts.source
          }));
          $img_properties.show();
        }
      }
      if (this.$image) {
        if (!this.options.insert_file_dialog_ui_url) {
          $('#insert_image_btn').remove();
        }
        if ($('#hallo_img_file_select_title').length > 0) {
          $('#hallo_img_file_select_title').text(this.texts.chage_image);
        }
        $('#hallo_img_properties #hallo_img_source').keyup(function () {
          return widget.$image.attr('src', this.value);
        });
        $('#hallo_img_properties #hallo_img_alt').keyup(function () {
          return widget.$image.attr('alt', this.value);
        });
        $('#hallo_img_properties #hallo_img_padding').keyup(function () {
          return widget.$image.css('padding', this.value);
        });
        $('#hallo_img_properties #hallo_img_height').keyup(function () {
          widget.$image.css('height', this.value);
          return widget.$image.attr('height', this.value);
        });
        $('#hallo_img_properties #hallo_img_width').keyup(function () {
          widget.$image.css('width', this.value);
          return widget.$image.attr('width', this.value);
        });
        $('#hallo_img_properties #hallo_img_float_left').click(function () {
          if (!this.checked) {
            return false;
          }
          widget.$image.css('float', 'left');
          $('#hallo_img_properties #hallo_img_float_right').removeAttr('checked');
          return $('#hallo_img_properties #hallo_img_unfloat').removeAttr('checked');
        });
        $('#hallo_img_properties #hallo_img_float_right').click(function () {
          if (!this.checked) {
            return false;
          }
          widget.$image.css('float', 'right');
          $('#hallo_img_properties #hallo_img_unfloat').removeAttr('checked');
          return $('#hallo_img_properties #hallo_img_float_left').removeAttr('checked');
        });
        return $('#hallo_img_properties #hallo_img_unfloat').click(function () {
          if (!this.checked) {
            return false;
          }
          widget.$image.css('float', 'none');
          $('#hallo_img_properties #hallo_img_float_right').removeAttr('checked');
          return $('#hallo_img_properties #hallo_img_float_left').removeAttr('checked');
        });
      } else {
        if (!this.options.insert_file_dialog_ui_url) {
          button = '<button id="insert_image_btn">' + this.texts.insert + '</button>';
          $img_properties.after(button);
          return $('#insert_image_btn').click(function () {
            var $img_source;
            $img_source = $('#hallo_img_properties #hallo_img_source');
            return widget._insert_image($img_source.val());
          });
        }
      }
    },
    _property_col_html: function (col_html) {
      return "<div class='hallo_img_property_col'>" + col_html + '</div>';
    },
    _property_row_html: function (row_html, label) {
      if (label == null) {
        label = '';
      }
      row_html = this._property_col_html(label) + this._property_col_html(row_html);
      return "<div class='hallo_img_property_row'>" + row_html + '</div>';
    },
    _property_html: function (property_html, options) {
      var entry;
      if (options == null) {
        options = {};
      }
      if (options.row === false) {
        if (options.label) {
          entry = '' + options.label + ' ' + property_html;
          property_html = "<span class='img_property_entry'>" + entry + '</span>';
        }
        return property_html;
      } else {
        entry = "<span class='img_property_entry'>" + property_html + '</span>';
        return this._property_row_html(entry, options.label);
      }
    },
    _property_input_html: function (id, value, options) {
      var text_field;
      if (options == null) {
        options = {};
      }
      text_field = "<input type='text' id='hallo_img_" + id + "' value='" + value + "'>";
      return this._property_html(text_field, options);
    },
    _property_cb_html: function (id, checked, options) {
      var cb, checked_attr;
      if (options == null) {
        options = {};
      }
      checked_attr = checked ? 'checked=checked' : '';
      cb = "<input type='checkbox' id='hallo_img_" + id + "' " + checked_attr + "'>";
      return this._property_html(cb, options);
    }
  });

  (function (jQuery) {
    return jQuery.widget('IKS.halloblock', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['h1', 'h2', 'h3', 'p', 'pre', 'blockquote'],
        buttonCssClass: null
      },
      populateToolbar: function (toolbar) {
        var buttonset, contentId, target;
        buttonset = jQuery('<span class="' + this.widgetName + '"></span>');
        contentId = '' + this.options.uuid + '-' + this.widgetName + '-data';
        target = this._prepareDropdown(contentId);
        toolbar.append(buttonset);
        buttonset.hallobuttonset();
        buttonset.append(target);
        return buttonset.append(this._prepareButton(target));
      },
      _prepareDropdown: function (contentId) {
        var addElement, containingElement, contentArea, element, _i, _len, _ref,
          _this = this;
        contentArea = jQuery('<div id="' + contentId + '"></div>');
        containingElement = this.options.editable.element.get(0).tagName.toLowerCase();
        addElement = function (element) {
          var el, events, queryState;
          el = jQuery("<button class='blockselector'>          <" + element + ' class="menu-item">' + element + '</' + element + '>        </button>');
          if (containingElement === element) {
            el.addClass('selected');
          }
          if (containingElement !== 'div') {
            el.addClass('disabled');
          }
          el.on('click', function () {
            var tagName;
            tagName = element.toUpperCase();
            if (el.hasClass('disabled')) {
              return;
            }
            if (navigator.appName === 'Microsoft Internet Explorer') {
              _this.options.editable.execute('FormatBlock', '<' + tagName + '>');
              return;
            }
            return _this.options.editable.execute('formatBlock', tagName);
          });
          queryState = function (event) {
            var block;
            block = document.queryCommandValue('formatBlock');
            if (block.toLowerCase() === element) {
              el.addClass('selected');
              return;
            }
            return el.removeClass('selected');
          };
          events = 'keyup paste change mouseup';
          _this.options.editable.element.on(events, queryState);
          _this.options.editable.element.on('halloenabled', function () {
            return _this.options.editable.element.on(events, queryState);
          });
          _this.options.editable.element.on('hallodisabled', function () {
            return _this.options.editable.element.off(events, queryState);
          });
          return el;
        };
        _ref = this.options.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          contentArea.append(addElement(element));
        }
        return contentArea;
      },
      _prepareButton: function (target) {
        var buttonElement;
        buttonElement = jQuery('<span></span>');
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: 'block',
          icon: 'icon-text-height',
          target: target,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloheadings', {
      options: {
        editable: null,
        uuid: '',
        formatBlocks: ['p', 'h1', 'h2', 'h3'],
        buttonCssClass: null
      },
      populateToolbar: function (toolbar) {
        var buttonize, buttonset, command, format, ie, widget, _i, _len, _ref,
          _this = this;
        widget = this;
        buttonset = jQuery('<span class="' + widget.widgetName + '"></span>');
        ie = navigator.appName === 'Microsoft Internet Explorer';
        command = (ie ? 'FormatBlock' : 'formatBlock');
        buttonize = function (format) {
          var buttonHolder;
          buttonHolder = jQuery('<span></span>');
          buttonHolder.hallobutton({
            label: format,
            editable: _this.options.editable,
            command: command,
            commandValue: (ie ? '<' + format + '>' : format),
            uuid: _this.options.uuid,
            cssClass: _this.options.buttonCssClass,
            queryState: function (event) {
              var compared, map, result, val, value, _i, _len, _ref;
              try {
                value = document.queryCommandValue(command);
                if (ie) {
                  map = {
                    p: 'normal'
                  };
                  _ref = [1, 2, 3, 4, 5, 6];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    val = _ref[_i];
                    map['h' + val] = val;
                  }
                  compared = value.match(new RegExp(map[format], 'i'));
                } else {
                  compared = value.match(new RegExp(format, 'i'));
                }
                result = compared ? true : false;
                return buttonHolder.hallobutton('checked', result);
              } catch (e) {

              }
            }
          });
          buttonHolder.find('button .ui-button-text').text(format.toUpperCase());
          return buttonset.append(buttonHolder);
        };
        _ref = this.options.formatBlocks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          format = _ref[_i];
          buttonize(format);
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloreundo', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      populateToolbar: function (toolbar) {
        var buttonize, buttonset,
          _this = this;
        buttonset = jQuery('<span class="' + this.widgetName + '"></span>');
        buttonize = function (cmd, label) {
          var buttonElement;
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: label,
            icon: cmd === 'undo' ? 'icon-undo' : 'icon-repeat',
            command: cmd,
            queryState: false,
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        buttonize('undo', 'Undo');
        buttonize('redo', 'Redo');
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloimage', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        limit: 8,
        search: null,
        searchUrl: null,
        suggestions: null,
        loaded: null,
        upload: null,
        uploadUrl: null,
        dialogOpts: {
          autoOpen: false,
          width: 270,
          height: 'auto',
          title: 'Insert Images',
          modal: false,
          resizable: false,
          draggable: true,
          dialogClass: 'halloimage-dialog'
        },
        dialog: null,
        buttonCssClass: null,
        entity: null,
        vie: null,
        dbPediaUrl: 'http://dev.iks-project.eu/stanbolfull',
        maxWidth: 250,
        maxHeight: 250
      },
      populateToolbar: function (toolbar) {
        var buttonHolder, buttonset, dialogId, id, tabContent, tabs, widget;
        this.options.toolbar = toolbar;
        widget = this;
        dialogId = '' + this.options.uuid + '-image-dialog';
        this.options.dialog = jQuery('<div id="' + dialogId + '">        <div class="nav">          <ul class="tabs">          </ul>          <div id="' + this.options.uuid + '-tab-activeIndicator"            class="tab-activeIndicator" />        </div>        <div class="dialogcontent">        </div>');
        tabs = jQuery('.tabs', this.options.dialog);
        tabContent = jQuery('.dialogcontent', this.options.dialog);
        if (widget.options.suggestions) {
          this._addGuiTabSuggestions(tabs, tabContent);
        }
        if (widget.options.search || widget.options.searchUrl) {
          this._addGuiTabSearch(tabs, tabContent);
        }
        if (widget.options.upload || widget.options.uploadUrl) {
          this._addGuiTabUpload(tabs, tabContent);
        }
        this.current = jQuery('<div class="currentImage"></div>').halloimagecurrent({
          uuid: this.options.uuid,
          imageWidget: this,
          editable: this.options.editable,
          dialog: this.options.dialog,
          maxWidth: this.options.maxWidth,
          maxHeight: this.options.maxHeight
        });
        jQuery('.dialogcontent', this.options.dialog).append(this.current);
        buttonset = jQuery('<span class="' + widget.widgetName + '"></span>');
        id = '' + this.options.uuid + '-image';
        buttonHolder = jQuery('<span></span>');
        buttonHolder.hallobutton({
          label: 'Images',
          icon: 'icon-picture',
          editable: this.options.editable,
          command: null,
          queryState: false,
          uuid: this.options.uuid,
          cssClass: this.options.buttonCssClass
        });
        buttonset.append(buttonHolder);
        this.button = buttonHolder;
        this.button.on('click', function (event) {
          if (widget.options.dialog.dialog('isOpen')) {
            widget._closeDialog();
          } else {
            widget._openDialog();
          }
          return false;
        });
        this.options.editable.element.on('hallodeactivated', function (event) {
          return widget._closeDialog();
        });
        jQuery(this.options.editable.element).delegate('img', 'click', function (event) {
          return widget._openDialog();
        });
        toolbar.append(buttonset);
        this.options.dialog.dialog(this.options.dialogOpts);
        return this._handleTabs();
      },
      setCurrent: function (image) {
        return this.current.halloimagecurrent('setImage', image);
      },
      _handleTabs: function () {
        var widget;
        widget = this;
        jQuery('.nav li', this.options.dialog).on('click', function () {
          var id, left;
          jQuery('.' + widget.widgetName + '-tab').hide();
          id = jQuery(this).attr('id');
          jQuery('#' + id + '-content').show();
          left = jQuery(this).position().left + (jQuery(this).width() / 2);
          return jQuery('#' + widget.options.uuid + '-tab-activeIndicator').css({
            'margin-left': left
          });
        });
        return jQuery('.nav li', this.options.dialog).first().click();
      },
      _openDialog: function () {
        var cleanUp, editableEl, getActive, suggestionSelector, toolbarEl, widget, xposition, yposition,
          _this = this;
        widget = this;
        cleanUp = function () {
          return window.setTimeout(function () {
            var thumbnails;
            thumbnails = jQuery('.imageThumbnail');
            return jQuery(thumbnails).each(function () {
              var size;
              size = jQuery('#' + this.id).width();
              if (size <= 20) {
                return jQuery('#' + this.id).parent('li').remove();
              }
            });
          }, 15000);
        };
        suggestionSelector = '#' + this.options.uuid + '-tab-suggestions-content';
        getActive = function () {
          return jQuery('.imageThumbnailActive', suggestionSelector).first().attr('src');
        };
        jQuery('#' + this.options.uuid + '-sugg-activeImage').attr('src', getActive());
        jQuery('#' + this.options.uuid + '-sugg-activeImageBg').attr('src', getActive());
        this.lastSelection = this.options.editable.getSelection();
        editableEl = jQuery(this.options.editable.element);
        toolbarEl = jQuery(this.options.toolbar);
        xposition = editableEl.offset().left + editableEl.outerWidth() - 3;
        yposition = toolbarEl.offset().top + toolbarEl.outerHeight() + 29;
        yposition -= jQuery(document).scrollTop();
        this.options.dialog.dialog('option', 'position', [xposition, yposition]);
        cleanUp();
        widget.options.loaded = 1;
        this.options.editable.keepActivated(true);
        this.options.dialog.dialog('open');
        return this.options.dialog.on('dialogclose', function () {
          jQuery('label', _this.button).removeClass('ui-state-active');
          _this.options.editable.element.focus();
          return _this.options.editable.keepActivated(false);
        });
      },
      _closeDialog: function () {
        return this.options.dialog.dialog('close');
      },
      _addGuiTabSuggestions: function (tabs, element) {
        var tab;
        tabs.append(jQuery('<li id="' + this.options.uuid + '-tab-suggestions"        class="' + this.widgetName + '-tabselector ' + this.widgetName + '-tab-suggestions">          <span>Suggestions</span>        </li>'));
        tab = jQuery('<div id="' + this.options.uuid + '-tab-suggestions-content"        class="' + this.widgetName + '-tab tab-suggestions"></div>');
        element.append(tab);
        return tab.halloimagesuggestions({
          uuid: this.options.uuid,
          imageWidget: this,
          entity: this.options.entity
        });
      },
      _addGuiTabSearch: function (tabs, element) {
        var dialogId, tab, widget;
        widget = this;
        dialogId = '' + this.options.uuid + '-image-dialog';
        tabs.append(jQuery('<li id="' + this.options.uuid + '-tab-search"        class="' + this.widgetName + '-tabselector ' + this.widgetName + '-tab-search">          <span>Search</span>        </li>'));
        tab = jQuery('<div id="' + this.options.uuid + '-tab-search-content"        class="' + widget.widgetName + '-tab tab-search"></div>');
        element.append(tab);
        return tab.halloimagesearch({
          uuid: this.options.uuid,
          imageWidget: this,
          searchCallback: this.options.search,
          searchUrl: this.options.searchUrl,
          limit: this.options.limit,
          entity: this.options.entity
        });
      },
      _addGuiTabUpload: function (tabs, element) {
        var tab;
        tabs.append(jQuery('<li id="' + this.options.uuid + '-tab-upload"        class="' + this.widgetName + '-tabselector ' + this.widgetName + '-tab-upload">          <span>Upload</span>        </li>'));
        tab = jQuery('<div id="' + this.options.uuid + '-tab-upload-content"        class="' + this.widgetName + '-tab tab-upload"></div>');
        element.append(tab);
        return tab.halloimageupload({
          uuid: this.options.uuid,
          uploadCallback: this.options.upload,
          uploadUrl: this.options.uploadUrl,
          imageWidget: this,
          entity: this.options.entity
        });
      }
      /*
          insertImage = () ->
          # This may need to insert an image that does not have the same URL as
          # the preview image, since it may be a different size
            # Check if we have a selection and fall back to @lastSelection otherwise
            try
              if not widget.options.editable.getSelection()
              throw new Error "SelectionNotSet"
            catch error
              widget.options.editable.restoreSelection(widget.lastSelection)

            document.execCommand "insertImage", null, jQuery(this).attr('src')
            img = document.getSelection().anchorNode.firstChild
            jQuery(img).attr "alt", jQuery(".caption").value

            triggerModified = () ->
              widget.element.trigger "hallomodified"
            window.setTimeout triggerModified, 100
            widget._closeDialog()

            addImage = "##{widget.options.uuid}-#{widget.widgetName-addimage"
            @options.dialog.find(".halloimage-activeImage, addImage).click insertImage
      */

    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('Liip.hallooverlay', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        overlay: null,
        padding: 10,
        background: null
      },
      _create: function () {
        var widget;
        widget = this;
        if (!this.options.bound) {
          this.options.bound = true;
          this.options.editable.element.on('halloactivated', function (event, data) {
            widget.options.currentEditable = jQuery(event.target);
            if (!widget.options.visible) {
              return widget.showOverlay();
            }
          });
          this.options.editable.element.on('hallomodified', function (event, data) {
            widget.options.currentEditable = jQuery(event.target);
            if (widget.options.visible) {
              return widget.resizeOverlay();
            }
          });
          return this.options.editable.element.on('hallodeactivated', function (event, data) {
            widget.options.currentEditable = jQuery(event.target);
            if (widget.options.visible) {
              return widget.hideOverlay();
            }
          });
        }
      },
      showOverlay: function () {
        this.options.visible = true;
        if (this.options.overlay === null) {
          if (jQuery('#halloOverlay').length > 0) {
            this.options.overlay = jQuery('#halloOverlay');
          } else {
            this.options.overlay = jQuery('<div id="halloOverlay"            class="halloOverlay">');
            jQuery(document.body).append(this.options.overlay);
          }
          this.options.overlay.on('click', jQuery.proxy(this.options.editable.turnOff, this.options.editable));
        }
        this.options.overlay.show();
        if (this.options.background === null) {
          if (jQuery('#halloBackground').length > 0) {
            this.options.background = jQuery('#halloBackground');
          } else {
            this.options.background = jQuery('<div id="halloBackground"            class="halloBackground">');
            jQuery(document.body).append(this.options.background);
          }
        }
        this.resizeOverlay();
        this.options.background.show();
        if (!this.options.originalZIndex) {
          this.options.originalZIndex = this.options.currentEditable.css('z-index');
        }
        return this.options.currentEditable.css('z-index', '350');
      },
      resizeOverlay: function () {
        var offset;
        offset = this.options.currentEditable.offset();
        return this.options.background.css({
          top: offset.top - this.options.padding,
          left: offset.left - this.options.padding,
          width: this.options.currentEditable.width() + 2 * this.options.padding,
          height: this.options.currentEditable.height() + 2 * this.options.padding
        });
      },
      hideOverlay: function () {
        this.options.visible = false;
        this.options.overlay.hide();
        this.options.background.hide();
        return this.options.currentEditable.css('z-index', this.options.originalZIndex);
      },
      _findBackgroundColor: function (jQueryfield) {
        var color;
        color = jQueryfield.css('background-color');
        if (color !== 'rgba(0, 0, 0, 0)' && color !== 'transparent') {
          return color;
        }
        if (jQueryfield.is('body')) {
          return 'white';
        } else {
          return this._findBackgroundColor(jQueryfield.parent());
        }
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloindicator', {
      options: {
        editable: null,
        className: 'halloEditIndicator'
      },
      _create: function () {
        var _this = this;
        return this.element.on('halloenabled', function () {
          return _this.buildIndicator();
        });
      },
      populateToolbar: function () {},
      buildIndicator: function () {
        var editButton;
        editButton = jQuery('<div><i class="icon-edit"></i> Edit</div>');
        editButton.addClass(this.options.className);
        editButton.hide();
        this.element.before(editButton);
        this.bindIndicator(editButton);
        return this.setIndicatorPosition(editButton);
      },
      bindIndicator: function (indicator) {
        var _this = this;
        indicator.on('click', function () {
          return _this.options.editable.element.focus();
        });
        this.element.on('halloactivated', function () {
          return indicator.hide();
        });
        this.element.on('hallodisabled', function () {
          return indicator.remove();
        });
        return this.options.editable.element.hover(function () {
          if (jQuery(this).hasClass('inEditMode')) {
            return;
          }
          return indicator.show();
        }, function (data) {
          if (jQuery(this).hasClass('inEditMode')) {
            return;
          }
          if (data.relatedTarget === indicator.get(0)) {
            return;
          }
          return indicator.hide();
        });
      },
      setIndicatorPosition: function (indicator) {
        var offset;
        indicator.css('position', 'absolute');
        offset = this.element.position();
        indicator.css('top', offset.top + 2);
        return indicator.css('left', offset.left + 2);
      }
    });
  })(jQuery);

  (function (jQuery) {
    var z;
    z = null;
    if (this.VIE !== void 0) {
      z = new VIE();
      z.use(new z.StanbolService({
        proxyDisabled: true,
        url: 'http://dev.iks-project.eu:8081'
      }));
    }
    return jQuery.widget('IKS.halloannotate', {
      options: {
        vie: z,
        editable: null,
        toolbar: null,
        uuid: '',
        select: function () {},
        decline: function () {},
        remove: function () {},
        buttonCssClass: null
      },
      _create: function () {
        var editableElement, turnOffAnnotate, widget;
        widget = this;
        if (this.options.vie === void 0) {
          throw new Error('The halloannotate plugin requires VIE');
          return;
        }
        if (typeof this.element.annotate !== 'function') {
          throw new Error('The halloannotate plugin requires annotate.js');
          return;
        }
        this.state = 'off';
        this.instantiate();
        turnOffAnnotate = function () {
          var editable;
          editable = this;
          return jQuery(editable).halloannotate('turnOff');
        };
        editableElement = this.options.editable.element;
        return editableElement.on('hallodisabled', turnOffAnnotate);
      },
      populateToolbar: function (toolbar) {
        var buttonHolder,
          _this = this;
        buttonHolder = jQuery('<span class="' + this.widgetName + '"></span>');
        this.button = buttonHolder.hallobutton({
          label: 'Annotate',
          icon: 'icon-tags',
          editable: this.options.editable,
          command: null,
          uuid: this.options.uuid,
          cssClass: this.options.buttonCssClass,
          queryState: false
        });
        buttonHolder.on('change', function (event) {
          if (_this.state === 'pending') {
            return;
          }
          if (_this.state === 'off') {
            return _this.turnOn();
          }
          return _this.turnOff();
        });
        buttonHolder.buttonset();
        return toolbar.append(this.button);
      },
      cleanupContentClone: function (el) {
        if (this.state === 'on') {
          return el.find('.entity:not([about])').each(function () {
            return jQuery(this).replaceWith(jQuery(this).html());
          });
        }
      },
      instantiate: function () {
        var widget;
        widget = this;
        return this.options.editable.element.annotate({
          vie: this.options.vie,
          debug: false,
          showTooltip: true,
          select: this.options.select,
          remove: this.options.remove,
          success: this.options.success,
          error: this.options.error
        }).on('annotateselect', function (event, data) {
          return widget.options.editable.setModified();
        }).on('annotateremove', function () {
          return jQuery.noop();
        });
      },
      turnPending: function () {
        this.state = 'pending';
        this.button.hallobutton('checked', false);
        return this.button.hallobutton('disable');
      },
      turnOn: function () {
        var widget,
          _this = this;
        this.turnPending();
        widget = this;
        try {
          return this.options.editable.element.annotate('enable', function (success) {
            if (!success) {
              return;
            }
            _this.state = 'on';
            _this.button.hallobutton('checked', true);
            return _this.button.hallobutton('enable');
          });
        } catch (e) {
          return alert(e);
        }
      },
      turnOff: function () {
        this.options.editable.element.annotate('disable');
        this.state = 'off';
        if (!this.button) {
          return;
        }
        this.button.attr('checked', false);
        this.button.find('label').removeClass('ui-state-clicked');
        return this.button.button('refresh');
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloimagesearch', {
      options: {
        imageWidget: null,
        searchCallback: null,
        searchUrl: null,
        limit: 5
      },
      _create: function () {
        return this.element.html('<div>\
        <form method="get">\
          <input type="text" class="searchInput" placeholder="Search" />\
          <input type="submit" class="btn searchButton" value="OK" />\
        </form>\
        <div class="searchResults imageThumbnailContainer">\
          <div class="activitySpinner">Loading images...</div>\
          <ul></ul>\
        </div>\
      </div>');
      },
      _init: function () {
        var _this = this;
        if (this.options.searchUrl && !this.options.searchCallback) {
          this.options.searchCallback = this._ajaxSearch;
        }
        jQuery('.activitySpinner', this.element).hide();
        return jQuery('form', this.element).submit(function (event) {
          var query;
          event.preventDefault();
          jQuery('.activitySpinner', _this.element).show();
          query = jQuery('.searchInput', _this.element.element).val();
          return _this.options.searchCallback(query, _this.options.limit, 0, function (results) {
            return _this._showResults(results);
          });
        });
      },
      _showResult: function (image) {
        var html,
          _this = this;
        if (!image.label) {
          image.label = image.alt;
        }
        html = jQuery('<li>        <img src="' + image.url + '" class="imageThumbnail"          title="' + image.label + '"></li>');
        html.on('click', function () {
          return _this.options.imageWidget.setCurrent(image);
        });
        jQuery('img', html).on('mousedown', function (event) {
          event.preventDefault();
          return _this.options.imageWidget.setCurrent(image);
        });
        return jQuery('.imageThumbnailContainer ul', this.element).append(html);
      },
      _showNextPrev: function (results) {
        var container,
          _this = this;
        container = jQuery('imageThumbnailContainer ul', this.element);
        container.prepend(jQuery('<div class="pager-prev" style="display:none" />'));
        container.append(jQuery('<div class="pager-next" style="display:none" />'));
        if (results.offset > 0) {
          jQuery('.pager-prev', container).show();
        }
        if (results.offset < results.total) {
          jQuery('.pager-next', container).show();
        }
        jQuery('.pager-prev', container).click(function (event) {
          var offset;
          offset = results.offset - _this.options.limit;
          return _this.options.searchCallback(query, _this.options.limit, offset, function (results) {
            return _this._showResults(results);
          });
        });
        return jQuery('.pager-next', container).click(function (event) {
          var offset;
          offset = results.offset + _this.options.limit;
          return _this.options.searchCallback(query, _this.options.limit, offset, function (results) {
            return _this._showResults(results);
          });
        });
      },
      _showResults: function (results) {
        var image, _i, _len, _ref;
        jQuery('.activitySpinner', this.element).hide();
        jQuery('.imageThumbnailContainer ul', this.element).empty();
        jQuery('.imageThumbnailContainer ul', this.element).show();
        _ref = results.assets;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          image = _ref[_i];
          this._showResult(image);
        }
        this.options.imageWidget.setCurrent(results.assets.shift());
        return this._showNextPrev(results);
      },
      _ajaxSearch: function (query, limit, offset, success) {
        var searchUrl;
        searchUrl = this.searchUrl + '?' + jQuery.param({
          q: query,
          limit: limit,
          offset: offset
        });
        return jQuery.getJSON(searchUrl, success);
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloimageupload', {
      options: {
        uploadCallback: null,
        uploadUrl: null,
        imageWidget: null,
        entity: null
      },
      _create: function () {
        return this.element.html('\
        <form class="upload">\
        <input type="file" class="file" name="userfile" accept="image/*" />\
        <input type="hidden" name="tags" value="" />\
        <input type="text" class="caption" name="caption" placeholder="Title" />\
        <button class="uploadSubmit">Upload</button>\
        </form>\
      ');
      },
      _init: function () {
        var widget;
        widget = this;
        if (widget.options.uploadUrl && !widget.options.uploadCallback) {
          widget.options.uploadCallback = widget._iframeUpload;
        }
        return jQuery('.uploadSubmit', this.element).on('click', function (event) {
          event.preventDefault();
          event.stopPropagation();
          return widget.options.uploadCallback({
            widget: widget,
            success: function (url) {
              return widget.options.imageWidget.setCurrent({
                url: url,
                label: ''
              });
            }
          });
        });
      },
      _prepareIframe: function (widget) {
        var iframe, iframeName;
        iframeName = '' + widget.widgetName + '_postframe_' + widget.options.uuid;
        iframeName = iframeName.replace(/-/g, '_');
        iframe = jQuery('#' + iframeName);
        if (iframe.length) {
          return iframe;
        }
        iframe = jQuery('<iframe name="' + iframeName + '" id="' + iframeName + '"        class="hidden" style="display:none" />');
        this.element.append(iframe);
        iframe.get(0).name = iframeName;
        return iframe;
      },
      _iframeUpload: function (data) {
        var iframe, uploadForm, uploadUrl, widget;
        widget = data.widget;
        iframe = widget._prepareIframe(widget);
        uploadForm = jQuery('form.upload', widget.element);
        if (typeof widget.options.uploadUrl === 'function') {
          uploadUrl = widget.options.uploadUrl(widget.options.entity);
        } else {
          uploadUrl = widget.options.uploadUrl;
        }
        iframe.on('load', function () {
          var imageUrl;
          imageUrl = iframe.get(0).contentWindow.location.href;
          widget.element.hide();
          return data.success(imageUrl);
        });
        uploadForm.attr('action', uploadUrl);
        uploadForm.attr('method', 'post');
        uploadForm.attr('target', iframe.get(0).name);
        uploadForm.attr('enctype', 'multipart/form-data');
        uploadForm.attr('encoding', 'multipart/form-data');
        return uploadForm.submit();
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloimagesuggestions', {
      loaded: false,
      options: {
        entity: null,
        vie: null,
        dbPediaUrl: null,
        getSuggestions: null,
        thumbnailUri: '<http://dbpedia.org/ontology/thumbnail>'
      },
      _create: function () {
        return this.element.html('\
      <div id="' + this.options.uuid + '-tab-suggestions">\
        <div class="imageThumbnailContainer">\
          <div class="activitySpinner">Loading images...</div>\
          <ul></ul>\
        </div>\
      </div>');
      },
      _init: function () {
        return jQuery('.activitySpinner', this.element).hide();
      },
      _normalizeRelated: function (related) {
        if (_.isString(related)) {
          return related;
        }
        if (_.isArray(related)) {
          return related.join(',');
        }
        return related.pluck('@subject').join(',');
      },
      _prepareVIE: function () {
        if (!this.options.vie) {
          this.options.vie = new VIE();
        }
        if (this.options.vie.services.dbpedia) {
          return;
        }
        if (!this.options.dbPediaUrl) {
          return;
        }
        return this.options.vie.use(new vie.DBPediaService({
          url: this.options.dbPediaUrl,
          proxyDisabled: true
        }));
      },
      _getSuggestions: function () {
        var limit, normalizedTags, tags;
        if (this.loaded) {
          return;
        }
        if (!this.options.entity) {
          return;
        }
        jQuery('.activitySpinner', this.element).show();
        tags = this.options.entity.get('skos:related');
        if (tags.length === 0) {
          jQuery('#activitySpinner').html('No images found.');
          return;
        }
        jQuery('.imageThumbnailContainer ul', this.element).empty();
        normalizedTags = this._normalizeRelated(tags);
        limit = this.options.limit;
        if (this.options.getSuggestions) {
          this.options.getSuggestions(normalizedTags, limit, 0, this._showSuggestions);
        }
        this._prepareVIE();
        if (this.options.vie.services.dbpedia) {
          this._getSuggestionsDbPedia(tags);
        }
        return this.loaded = true;
      },
      _getSuggestionsDbPedia: function (tags) {
        var thumbId, widget;
        widget = this;
        thumbId = 1;
        return _.each(tags, function (tag) {
          return vie.load({
            entity: tag
          }).using('dbpedia').execute().done(function (entities) {
            jQuery('.activitySpinner', this.element).hide();
            return _.each(entities, function (entity) {
              var img, thumbnail;
              thumbnail = entity.attributes[widget.options.thumbnailUri];
              if (!thumbnail) {
                return;
              }
              if (_.isObject(thumbnail)) {
                img = thumbnail[0].value;
              }
              if (_.isString(thumbnail)) {
                img = widget.options.entity.fromReference(thumbnail);
              }
              return widget._showSuggestion({
                url: img,
                label: tag
              });
            });
          });
        });
      },
      _showSuggestion: function (image) {
        var html,
          _this = this;
        html = jQuery('<li>        <img src="' + image.url + '" class="imageThumbnail"          title="' + image.label + '">        </li>');
        html.on('click', function () {
          return _this.options.imageWidget.setCurrent(image);
        });
        return jQuery('.imageThumbnailContainer ul', this.element).append(html);
      },
      _showSuggestions: function (suggestions) {
        var _this = this;
        jQuery('.activitySpinner', this.element).hide();
        return _.each(suggestions, function (image) {
          return _this._showSuggestion(image);
        });
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloimagecurrent', {
      options: {
        imageWidget: null,
        startPlace: '',
        draggables: [],
        maxWidth: 400,
        maxHeight: 200
      },
      _create: function () {
        this.element.html('<div>\
        <div class="activeImageContainer">\
          <div class="rotationWrapper">\
            <div class="hintArrow"></div>\
              <img src="" class="activeImage" />\
            </div>\
            <img src="" class="activeImage activeImageBg" />\
          </div>\
        </div>');
        this.element.hide();
        return this._prepareDnD();
      },
      _init: function () {
        var editable, widget;
        editable = jQuery(this.options.editable.element);
        widget = this;
        jQuery('img', editable).each(function (index, elem) {
          return widget._initDraggable(elem, editable);
        });
        return jQuery('p', editable).each(function (index, elem) {
          if (jQuery(elem).data('jquery_droppable_initialized')) {
            return;
          }
          jQuery(elem).droppable({
            tolerance: 'pointer',
            drop: function (event, ui) {
              return widget._handleDropEvent(event, ui);
            },
            over: function (event, ui) {
              return widget._handleOverEvent(event, ui);
            },
            out: function (event, ui) {
              return widget._handleLeaveEvent(event, ui);
            }
          });
          return jQuery(elem).data('jquery_droppable_initialized', true);
        });
      },
      _prepareDnD: function () {
        var editable, overlayMiddleConfig, widget;
        widget = this;
        editable = jQuery(this.options.editable.element);
        this.options.offset = editable.offset();
        this.options.third = parseFloat(editable.width() / 3);
        overlayMiddleConfig = {
          width: this.options.third,
          height: editable.height()
        };
        this.overlay = {
          big: jQuery('<div/>').addClass('bigOverlay').css({
            width: this.options.third * 2,
            height: editable.height()
          }),
          left: jQuery('<div/>').addClass('smallOverlay smallOverlayLeft'),
          right: jQuery('<div/>').addClass('smallOverlay smallOverlayRight')
        };
        this.overlay.left.css(overlayMiddleConfig);
        this.overlay.right.css(overlayMiddleConfig).css('left', this.options.third * 2);
        editable.on('halloactivated', function () {
          return widget._enableDragging();
        });
        return editable.on('hallodeactivated', function () {
          return widget._disableDragging();
        });
      },
      setImage: function (image) {
        if (!image) {
          return;
        }
        this.element.show();
        jQuery('.activeImage', this.element).attr('src', image.url);
        if (image.label) {
          jQuery('input', this.element).val(image.label);
        }
        return this._initImage(jQuery(this.options.editable.element));
      },
      _delayAction: function (functionToCall, delay) {
        var timer;
        timer = clearTimeout(timer);
        if (!timer) {
          return timer = setTimeout(functionToCall, delay);
        }
      },
      _calcDropPosition: function (offset, event) {
        var position, rightTreshold;
        position = offset.left + this.options.third;
        rightTreshold = offset.left + this.options.third * 2;
        if (event.pageX >= position && event.pageX <= rightTreshold) {
          return 'middle';
        } else if (event.pageX < position) {
          return 'left';
        } else if (event.pageX > rightTreshold) {
          return 'right';
        }
      },
      _createInsertElement: function (image, tmp) {
        var imageInsert, tmpImg;
        imageInsert = jQuery('<img>');
        tmpImg = new Image();
        jQuery(tmpImg).on('load', function () {});
        tmpImg.src = image.src;
        imageInsert.attr({
          src: tmpImg.src,
          alt: !tmp ? jQuery(image).attr('alt') : void 0,
          'class': tmp ? 'halloTmp' : 'imageInText'
        });
        imageInsert.show();
        return imageInsert;
      },
      _createLineFeedbackElement: function () {
        return jQuery('<div/>').addClass('halloTmpLine');
      },
      _removeFeedbackElements: function () {
        this.overlay.big.remove();
        this.overlay.left.remove();
        this.overlay.right.remove();
        return jQuery('.halloTmp, .halloTmpLine', this.options.editable.element).remove();
      },
      _removeCustomHelper: function () {
        return jQuery('.customHelper').remove();
      },
      _showOverlay: function (position) {
        var eHeight, editable;
        editable = jQuery(this.options.editable.element);
        eHeight = editable.height();
        eHeight += parseFloat(editable.css('paddingTop'));
        eHeight += parseFloat(editable.css('paddingBottom'));
        this.overlay.big.css({
          height: eHeight
        });
        this.overlay.left.css({
          height: eHeight
        });
        this.overlay.right.css({
          height: eHeight
        });
        switch (position) {
          case 'left':
            this.overlay.big.addClass('bigOverlayLeft');
            this.overlay.big.removeClass('bigOverlayRight');
            this.overlay.big.css({
              left: this.options.third
            });
            this.overlay.big.show();
            this.overlay.left.hide();
            return this.overlay.right.hide();
          case 'middle':
            this.overlay.big.removeClass('bigOverlayLeft bigOverlayRight');
            this.overlay.big.hide();
            this.overlay.left.show();
            return this.overlay.right.show();
          case 'right':
            this.overlay.big.addClass('bigOverlayRight');
            this.overlay.big.removeClass('bigOverlayLeft');
            this.overlay.big.css({
              left: 0
            });
            this.overlay.big.show();
            this.overlay.left.hide();
            return this.overlay.right.hide();
        }
      },
      _checkOrigin: function (event) {
        if (jQuery(event.target).parents('[contenteditable]').length !== 0) {
          return true;
        }
        return false;
      },
      _createFeedback: function (image, position) {
        var el;
        if (position === 'middle') {
          return this._createLineFeedbackElement();
        }
        el = this._createInsertElement(image, true);
        return el.addClass('inlineImage-' + position);
      },
      _handleOverEvent: function (event, ui) {
        var editable, postPone, widget;
        widget = this;
        editable = jQuery(this.options.editable);
        postPone = function () {
          var position, target;
          window.waitWithTrash = clearTimeout(window.waitWithTrash);
          position = widget._calcDropPosition(widget.options.offset, event);
          jQuery('.trashcan', ui.helper).remove();
          editable[0].element.append(widget.overlay.big);
          editable[0].element.append(widget.overlay.left);
          editable[0].element.append(widget.overlay.right);
          widget._removeFeedbackElements();
          target = jQuery(event.target);
          target.prepend(widget._createFeedback(ui.draggable[0], position));
          if (position === 'middle') {
            target.prepend(widget._createFeedback(ui.draggable[0], 'right'));
            jQuery('.halloTmp', event.target).hide();
          } else {
            target.prepend(widget._createFeedback(ui.draggable[0], 'middle'));
            jQuery('.halloTmpLine', event.target).hide();
          }
          return widget._showOverlay(position);
        };
        return setTimeout(postPone, 5);
      },
      _handleDragEvent: function (event, ui) {
        var position, tmpFeedbackLR, tmpFeedbackMiddle;
        position = this._calcDropPosition(this.options.offset, event);
        if (position === this._lastPositionDrag) {
          return;
        }
        this._lastPositionDrag = position;
        tmpFeedbackLR = jQuery('.halloTmp', this.options.editable.element);
        tmpFeedbackMiddle = jQuery('.halloTmpLine', this.options.editable.element);
        if (position === 'middle') {
          tmpFeedbackMiddle.show();
          tmpFeedbackLR.hide();
        } else {
          tmpFeedbackMiddle.hide();
          tmpFeedbackLR.removeClass('inlineImage-left inlineImage-right');
          tmpFeedbackLR.addClass('inlineImage-' + position);
          tmpFeedbackLR.show();
        }
        return this._showOverlay(position);
      },
      _handleLeaveEvent: function (event, ui) {
        var func;
        func = function () {
          if (!jQuery('div.trashcan', ui.helper).length) {
            jQuery(ui.helper).append(jQuery('<div class="trashcan"></div>'));
            return jQuery('.bigOverlay, .smallOverlay').remove();
          }
        };
        window.waitWithTrash = setTimeout(func, 200);
        return this._removeFeedbackElements();
      },
      _handleStartEvent: function (event, ui) {
        var internalDrop;
        internalDrop = this._checkOrigin(event);
        if (internalDrop) {
          jQuery(event.target).remove();
        }
        jQuery(document).trigger('startPreventSave');
        return this.options.startPlace = jQuery(event.target);
      },
      _handleStopEvent: function (event, ui) {
        var internalDrop;
        internalDrop = this._checkOrigin(event);
        if (internalDrop) {
          jQuery(event.target).remove();
        } else {
          jQuery(this.options.editable.element).trigger('change');
        }
        this.overlay.big.hide();
        this.overlay.left.hide();
        this.overlay.right.hide();
        return jQuery(document).trigger('stopPreventSave');
      },
      _handleDropEvent: function (event, ui) {
        var classes, editable, imageInsert, internalDrop, left, position;
        editable = jQuery(this.options.editable.element);
        internalDrop = this._checkOrigin(event);
        position = this._calcDropPosition(this.options.offset, event);
        this._removeFeedbackElements();
        this._removeCustomHelper();
        imageInsert = this._createInsertElement(ui.draggable[0], false);
        classes = 'inlineImage-middle inlineImage-left inlineImage-right';
        if (position === 'middle') {
          imageInsert.show();
          imageInsert.removeClass(classes);
          left = editable.width();
          left += parseFloat(editable.css('paddingLeft'));
          left += parseFloat(editable.css('paddingRight'));
          left -= imageInsert.attr('width');
          imageInsert.addClass('inlineImage-' + position).css({
            position: 'relative',
            left: left / 2
          });
          imageInsert.insertBefore(jQuery(event.target));
        } else {
          imageInsert.removeClass(classes);
          imageInsert.addClass('inlineImage-' + position);
          imageInsert.css('display', 'block');
          jQuery(event.target).prepend(imageInsert);
        }
        this.overlay.big.hide();
        this.overlay.left.hide();
        this.overlay.right.hide();
        editable.trigger('change');
        return this._initImage(editable);
      },
      _createHelper: function (event) {
        return jQuery('<div>').css({
          backgroundImage: 'url(' + (jQuery(event.currentTarget).attr('src')) + ')'
        }).addClass('customHelper').appendTo('body');
      },
      _initDraggable: function (elem, editable) {
        var widget;
        widget = this;
        if (!elem.jquery_draggable_initialized) {
          elem.jquery_draggable_initialized = true;
          jQuery(elem).draggable({
            cursor: 'move',
            helper: function (event) {
              return widget._createHelper(event);
            },
            drag: function (event, ui) {
              return widget._handleDragEvent(event, ui);
            },
            start: function (event, ui) {
              return widget._handleStartEvent(event, ui);
            },
            stop: function (event, ui) {
              return widget._handleStopEvent(event, ui);
            },
            disabled: !editable.hasClass('inEditMode'),
            cursorAt: {
              top: 50,
              left: 50
            }
          });
        }
        return widget.options.draggables.push(elem);
      },
      _initImage: function (editable) {
        var widget;
        widget = this;
        return jQuery('.rotationWrapper img', this.options.dialog).each(function (index, elem) {
          return widget._initDraggable(elem, editable);
        });
      },
      _enableDragging: function () {
        return jQuery.each(this.options.draggables, function (index, d) {
          return jQuery(d).draggable('option', 'disabled', false);
        });
      },
      _disableDragging: function () {
        return jQuery.each(this.options.draggables, function (index, d) {
          return jQuery(d).draggable('option', 'disabled', true);
        });
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.hallojustify', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      populateToolbar: function (toolbar) {
        var buttonize, buttonset,
          _this = this;
        buttonset = jQuery('<span class="' + this.widgetName + '"></span>');
        buttonize = function (alignment) {
          var buttonElement;
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: alignment,
            command: 'justify' + alignment,
            icon: 'icon-align-' + (alignment.toLowerCase()),
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        buttonize('Left');
        buttonize('Center');
        buttonize('Right');
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloblacklist', {
      options: {
        tags: []
      },
      _init: function () {
        if (this.options.tags.indexOf('br') !== -1) {
          return this.element.on('keydown', function (event) {
            if (event.originalEvent.keyCode === 13) {
              return event.preventDefault();
            }
          });
        }
      },
      cleanupContentClone: function (el) {
        var tag, _i, _len, _ref, _results;
        _ref = this.options.tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          _results.push(jQuery(tag, el).remove());
        }
        return _results;
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('Liip.hallotoolbarlinebreak', {
      options: {
        editable: null,
        uuid: '',
        breakAfter: []
      },
      populateToolbar: function (toolbar) {
        var buttonRow, buttonset, buttonsets, queuedButtonsets, row, rowcounter, _i, _j, _len, _len1, _ref;
        buttonsets = jQuery('.ui-buttonset', toolbar);
        queuedButtonsets = jQuery();
        rowcounter = 0;
        _ref = this.options.breakAfter;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          rowcounter++;
          buttonRow = '<div          class="halloButtonrow halloButtonrow-' + rowcounter + '" />';
          for (_j = 0, _len1 = buttonsets.length; _j < _len1; _j++) {
            buttonset = buttonsets[_j];
            queuedButtonsets = jQuery(queuedButtonsets).add(jQuery(buttonset));
            if (jQuery(buttonset).hasClass(row)) {
              queuedButtonsets.wrapAll(buttonRow);
              buttonsets = buttonsets.not(queuedButtonsets);
              queuedButtonsets = jQuery();
              break;
            }
          }
        }
        if (buttonsets.length > 0) {
          rowcounter++;
          buttonRow = '<div          class="halloButtonrow halloButtonrow-' + rowcounter + '" />';
          return buttonsets.wrapAll(buttonRow);
        }
      }
    });
  })(jQuery);

  (function (jQuery) {
    jQuery.widget('IKS.hallobutton', {
      button: null,
      isChecked: false,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        command: null,
        commandValue: null,
        queryState: true,
        cssClass: null
      },
      _create: function () {
        var hoverclass, id, opts, _base, _ref,
          _this = this;
        if ((_ref = (_base = this.options).icon) == null) {
          _base.icon = 'icon-' + (this.options.label.toLowerCase());
        }
        id = '' + this.options.uuid + '-' + this.options.label;
        opts = this.options;
        this.button = this._createButton(id, opts.command, opts.label, opts.icon);
        this.element.append(this.button);
        if (this.options.cssClass) {
          this.button.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          this.button.addClass('btn-large');
        }
        this.button.data('hallo-command', this.options.command);
        if (this.options.commandValue) {
          this.button.data('hallo-command-value', this.options.commandValue);
        }
        hoverclass = 'ui-state-hover';
        this.button.on('mouseenter', function (event) {
          if (_this.isEnabled()) {
            return _this.button.addClass(hoverclass);
          }
        });
        return this.button.on('mouseleave', function (event) {
          return _this.button.removeClass(hoverclass);
        });
      },
      _init: function () {
        var editableElement, events, queryState,
          _this = this;
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.element.append(this.button);
        if (this.options.queryState === true) {
          queryState = function (event) {
            var compared, value;
            if (!_this.options.command) {
              return;
            }
            try {
              if (_this.options.commandValue) {
                value = document.queryCommandValue(_this.options.command);
                compared = value.match(new RegExp(_this.options.commandValue, 'i'));
                return _this.checked(compared ? true : false);
              } else {
                return _this.checked(document.queryCommandState(_this.options.command));
              }
            } catch (e) {

            }
          };
        } else {
          queryState = this.options.queryState;
        }
        if (this.options.command) {
          this.button.on('click', function (event) {
            if (_this.options.commandValue) {
              _this.options.editable.execute(_this.options.command, _this.options.commandValue);
            } else {
              _this.options.editable.execute(_this.options.command);
            }
            queryState();
            return false;
          });
        }
        if (!this.options.queryState) {
          return;
        }
        editableElement = this.options.editable.element;
        events = 'keyup paste change mouseup hallomodified';
        editableElement.on(events, queryState);
        editableElement.on('halloenabled', function () {
          return editableElement.on(events, queryState);
        });
        return editableElement.on('hallodisabled', function () {
          return editableElement.off(events, queryState);
        });
      },
      enable: function () {
        return this.button.removeAttr('disabled');
      },
      disable: function () {
        return this.button.attr('disabled', 'true');
      },
      isEnabled: function () {
        return this.button.attr('disabled') !== 'true';
      },
      refresh: function () {
        if (this.isChecked) {
          return this.button.addClass('ui-state-active');
        } else {
          return this.button.removeClass('ui-state-active');
        }
      },
      checked: function (checked) {
        this.isChecked = checked;
        return this.refresh();
      },
      _createButton: function (id, command, label, icon) {
        var classes;
        classes = ['ui-button', 'ui-widget', 'ui-state-default', 'ui-corner-all', 'ui-button-text-only', '' + command + '_button'];
        return jQuery('<button id="' + id + '"        class="' + (classes.join(' ')) + '" title="' + label + '">          <span class="ui-button-text">            <i class="' + icon + '"></i>          </span>        </button>');
      }
    });
    return jQuery.widget('IKS.hallobuttonset', {
      buttons: null,
      _create: function () {
        return this.element.addClass('ui-buttonset');
      },
      _init: function () {
        return this.refresh();
      },
      refresh: function () {
        var rtl;
        rtl = this.element.css('direction') === 'rtl';
        this.buttons = this.element.find('.ui-button');
        this.buttons.removeClass('ui-corner-all ui-corner-left ui-corner-right');
        if (rtl) {
          this.buttons.filter(':first').addClass('ui-corner-right');
          return this.buttons.filter(':last').addClass('ui-corner-left');
        } else {
          this.buttons.filter(':first').addClass('ui-corner-left');
          return this.buttons.filter(':last').addClass('ui-corner-right');
        }
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.hallodropdownbutton', {
      button: null,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        target: '',
        cssClass: null
      },
      _create: function () {
        var _base, _ref;
        return (_ref = (_base = this.options).icon) != null ? _ref : _base.icon = 'icon-' + (this.options.label.toLowerCase());
      },
      _init: function () {
        var target,
          _this = this;
        target = jQuery(this.options.target);
        target.css('position', 'absolute');
        target.addClass('dropdown-menu');
        target.hide();
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.button.on('click', function () {
          if (target.hasClass('open')) {
            _this._hideTarget();
            return;
          }
          return _this._showTarget();
        });
        target.on('click', function () {
          return _this._hideTarget();
        });
        this.options.editable.element.on('hallodeactivated', function () {
          return _this._hideTarget();
        });
        return this.element.append(this.button);
      },
      _showTarget: function () {
        var target;
        target = jQuery(this.options.target);
        this._updateTargetPosition();
        target.addClass('open');
        return target.show();
      },
      _hideTarget: function () {
        var target;
        target = jQuery(this.options.target);
        target.removeClass('open');
        return target.hide();
      },
      _updateTargetPosition: function () {
        var left, target, top, _ref;
        target = jQuery(this.options.target);
        _ref = this.button.position(), top = _ref.top, left = _ref.left;
        top += this.button.outerHeight();
        target.css('top', top);
        return target.css('left', left - 20);
      },
      _prepareButton: function () {
        var buttonEl, classes, id;
        id = '' + this.options.uuid + '-' + this.options.label;
        classes = ['ui-button', 'ui-widget', 'ui-state-default', 'ui-corner-all', 'ui-button-text-only'];
        buttonEl = jQuery('<button id="' + id + '"       class="' + (classes.join(' ')) + '" title="' + this.options.label + '">       <span class="ui-button-text"><i class="' + this.options.icon + '"></i></span>       </button>');
        if (this.options.cssClass) {
          buttonEl.addClass(this.options.cssClass);
        }
        return buttonEl;
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloToolbarFixed', {
      toolbar: null,
      options: {
        parentElement: 'body',
        editable: null,
        toolbar: null,
        affix: true,
        affixTopOffset: 2
      },
      _create: function () {
        var el, widthToAdd,
          _this = this;
        this.toolbar = this.options.toolbar;
        this.toolbar.show();
        jQuery(this.options.parentElement).append(this.toolbar);
        this._bindEvents();
        jQuery(window).resize(function (event) {
          return _this.setPosition();
        });
        jQuery(window).scroll(function (event) {
          return _this.setPosition();
        });
        if (this.options.parentElement === 'body') {
          el = jQuery(this.element);
          widthToAdd = parseFloat(el.css('padding-left'));
          widthToAdd += parseFloat(el.css('padding-right'));
          widthToAdd += parseFloat(el.css('border-left-width'));
          widthToAdd += parseFloat(el.css('border-right-width'));
          widthToAdd += (parseFloat(el.css('outline-width'))) * 2;
          widthToAdd += (parseFloat(el.css('outline-offset'))) * 2;
          return jQuery(this.toolbar).css('width', el.width() + widthToAdd);
        }
      },
      _getPosition: function (event, selection) {
        var offset, position, width;
        if (!event) {
          return;
        }
        width = parseFloat(this.element.css('outline-width'));
        offset = width + parseFloat(this.element.css('outline-offset'));
        return position = {
          top: this.element.offset().top - this.toolbar.outerHeight() - offset,
          left: this.element.offset().left - offset
        };
      },
      _getCaretPosition: function (range) {
        var newRange, position, tmpSpan;
        tmpSpan = jQuery('<span/>');
        newRange = rangy.createRange();
        newRange.setStart(range.endContainer, range.endOffset);
        newRange.insertNode(tmpSpan.get(0));
        position = {
          top: tmpSpan.offset().top,
          left: tmpSpan.offset().left
        };
        tmpSpan.remove();
        return position;
      },
      setPosition: function () {
        var elementBottom, elementTop, height, offset, scrollTop, topOffset;
        if (this.options.parentElement !== 'body') {
          return;
        }
        this.toolbar.css('position', 'absolute');
        this.toolbar.css('top', this.element.offset().top - this.toolbar.outerHeight());
        if (this.options.affix) {
          scrollTop = jQuery(window).scrollTop();
          offset = this.element.offset();
          height = this.element.height();
          topOffset = this.options.affixTopOffset;
          elementTop = offset.top - (this.toolbar.height() + this.options.affixTopOffset);
          elementBottom = (height - topOffset) + (offset.top - this.toolbar.height());
          if (scrollTop > elementTop && scrollTop < elementBottom) {
            this.toolbar.css('position', 'fixed');
            this.toolbar.css('top', this.options.affixTopOffset);
          }
        } else {

        }
        return this.toolbar.css('left', this.element.offset().left - 2);
      },
      _updatePosition: function (position) {},
      _bindEvents: function () {
        var _this = this;
        this.element.on('halloactivated', function (event, data) {
          _this.setPosition();
          return _this.toolbar.show();
        });
        return this.element.on('hallodeactivated', function (event, data) {
          return _this.toolbar.hide();
        });
      }
    });
  })(jQuery);

  (function (jQuery) {
    return jQuery.widget('IKS.halloToolbarContextual', {
      toolbar: null,
      options: {
        parentElement: 'body',
        editable: null,
        toolbar: null,
        positionAbove: false
      },
      _create: function () {
        var _this = this;
        this.toolbar = this.options.toolbar;
        jQuery(this.options.parentElement).append(this.toolbar);
        this._bindEvents();
        return jQuery(window).resize(function (event) {
          return _this._updatePosition(_this._getPosition(event));
        });
      },
      _getPosition: function (event, selection) {
        var eventType, position;
        if (!event) {
          return;
        }
        eventType = event.type;
        switch (eventType) {
          case 'keydown':
          case 'keyup':
          case 'keypress':
            return this._getCaretPosition(selection);
          case 'click':
          case 'mousedown':
          case 'mouseup':
            return position = {
              top: event.pageY,
              left: event.pageX
            };
        }
      },
      _getCaretPosition: function (range) {
        var newRange, position, tmpSpan;
        tmpSpan = jQuery('<span/>');
        newRange = rangy.createRange();
        newRange.setStart(range.endContainer, range.endOffset);
        newRange.insertNode(tmpSpan.get(0));
        position = {
          top: tmpSpan.offset().top,
          left: tmpSpan.offset().left
        };
        tmpSpan.remove();
        return position;
      },
      setPosition: function () {
        if (this.options.parentElement !== 'body') {
          this.options.parentElement = 'body';
          jQuery(this.options.parentElement).append(this.toolbar);
        }
        this.toolbar.css('position', 'absolute');
        this.toolbar.css('top', this.element.offset().top - 20);
        return this.toolbar.css('left', this.element.offset().left);
      },
      _updatePosition: function (position, selection) {
        var left, selectionRect, toolbar_height_offset, top, top_offset;
        if (selection == null) {
          selection = null;
        }
        if (!position) {
          return;
        }
        if (!(position.top && position.left)) {
          return;
        }
        toolbar_height_offset = this.toolbar.outerHeight() + 10;
        if (selection && !selection.collapsed && selection.nativeRange) {
          selectionRect = selection.nativeRange.getBoundingClientRect();
          if (this.options.positionAbove) {
            top_offset = selectionRect.top - toolbar_height_offset;
          } else {
            top_offset = selectionRect.bottom + 10;
          }
          top = jQuery(window).scrollTop() + top_offset;
          left = jQuery(window).scrollLeft() + selectionRect.left;
        } else {
          if (this.options.positionAbove) {
            top_offset = -10 - toolbar_height_offset;
          } else {
            top_offset = 20;
          }
          top = position.top + top_offset;
          left = position.left - this.toolbar.outerWidth() / 2 + 30;
        }
        this.toolbar.css('top', top);
        return this.toolbar.css('left', left);
      },
      _bindEvents: function () {
        var _this = this;
        this.element.on('halloselected', function (event, data) {
          var position;
          position = _this._getPosition(data.originalEvent, data.selection);
          if (!position) {
            return;
          }
          _this._updatePosition(position, data.selection);
          if (_this.toolbar.html() !== '') {
            return _this.toolbar.show();
          }
        });
        this.element.on('hallounselected', function (event, data) {
          return _this.toolbar.hide();
        });
        return this.element.on('hallodeactivated', function (event, data) {
          return _this.toolbar.hide();
        });
      }
    });
  })(jQuery);

  /*
  Hallo 1.0.2 - a rich text editing jQuery UI widget
  (c) 2011 Henri Bergius, IKS Consortium
  Hallo may be freely distributed under the MIT license
  http://hallojs.org
  */

  (function (jQuery) {
    return jQuery.widget('IKS.hallo', {
      toolbar: null,
      bound: false,
      originalContent: '',
      previousContent: '',
      uuid: '',
      selection: null,
      _keepActivated: false,
      originalHref: null,
      options: {
        editable: true,
        plugins: {},
        toolbar: 'halloToolbarContextual',
        parentElement: 'body',
        buttonCssClass: null,
        toolbarCssClass: null,
        toolbarPositionAbove: false,
        toolbarOptions: {},
        placeholder: '',
        forceStructured: true,
        checkTouch: true,
        touchScreen: null
      },
      _create: function () {
        var options, plugin, _ref,
          _this = this;
        this.id = this._generateUUID();
        if (this.options.checkTouch && this.options.touchScreen === null) {
          this.checkTouch();
        }
        _ref = this.options.plugins;
        for (plugin in _ref) {
          options = _ref[plugin];
          if (!jQuery.isPlainObject(options)) {
            options = {};
          }
          jQuery.extend(options, {
            editable: this,
            uuid: this.id,
            buttonCssClass: this.options.buttonCssClass
          });
          jQuery(this.element)[plugin](options);
        }
        this.element.one('halloactivated', function () {
          return _this._prepareToolbar();
        });
        return this.originalContent = this.getContents();
      },
      _init: function () {
        if (this.options.editable) {
          return this.enable();
        } else {
          return this.disable();
        }
      },
      destroy: function () {
        var options, plugin, _ref;
        this.disable();
        if (this.toolbar) {
          this.toolbar.remove();
          this.element[this.options.toolbar]('destroy');
        }
        _ref = this.options.plugins;
        for (plugin in _ref) {
          options = _ref[plugin];
          jQuery(this.element)[plugin]('destroy');
        }
        return jQuery.Widget.prototype.destroy.call(this);
      },
      disable: function () {
        var _this = this;
        this.element.attr('contentEditable', false);
        this.element.off('focus', this._activated);
        this.element.off('blur', this._deactivated);
        this.element.off('keyup paste change', this._checkModified);
        this.element.off('keyup', this._keys);
        this.element.off('keyup mouseup', this._checkSelection);
        this.bound = false;
        jQuery(this.element).removeClass('isModified');
        jQuery(this.element).removeClass('inEditMode');
        this.element.parents('a').andSelf().each(function (idx, elem) {
          var element;
          element = jQuery(elem);
          if (!element.is('a')) {
            return;
          }
          if (!_this.originalHref) {
            return;
          }
          return element.attr('href', _this.originalHref);
        });
        return this._trigger('disabled', null);
      },
      enable: function () {
        var _this = this;
        this.element.parents('a[href]').andSelf().each(function (idx, elem) {
          var element;
          element = jQuery(elem);
          if (!element.is('a[href]')) {
            return;
          }
          _this.originalHref = element.attr('href');
          return element.removeAttr('href');
        });
        this.element.attr('contentEditable', true);
        if (!this.element.html().trim()) {
          this.element.html(this.options.placeholder);
          this.element.css({
            'min-width': this.element.innerWidth(),
            'min-height': this.element.innerHeight()
          });
        }
        if (!this.bound) {
          this.element.on('focus', this, this._activated);
          this.element.on('blur', this, this._deactivated);
          this.element.on('keyup paste change', this, this._checkModified);
          this.element.on('keyup', this, this._keys);
          this.element.on('keyup mouseup', this, this._checkSelection);
          this.bound = true;
        }
        if (this.options.forceStructured) {
          this._forceStructured();
        }
        return this._trigger('enabled', null);
      },
      activate: function () {
        return this.element.focus();
      },
      containsSelection: function () {
        var range;
        range = this.getSelection();
        return this.element.has(range.startContainer).length > 0;
      },
      getSelection: function () {
        var range, sel;
        sel = rangy.getSelection();
        range = null;
        if (sel.rangeCount > 0) {
          range = sel.getRangeAt(0);
        } else {
          range = rangy.createRange();
        }
        return range;
      },
      restoreSelection: function (range) {
        var sel;
        sel = rangy.getSelection();
        return sel.setSingleRange(range);
      },
      replaceSelection: function (cb) {
        var newTextNode, r, range, sel, t;
        if (navigator.appName === 'Microsoft Internet Explorer') {
          t = document.selection.createRange().text;
          r = document.selection.createRange();
          return r.pasteHTML(cb(t));
        } else {
          sel = window.getSelection();
          range = sel.getRangeAt(0);
          newTextNode = document.createTextNode(cb(range.extractContents()));
          range.insertNode(newTextNode);
          range.setStartAfter(newTextNode);
          sel.removeAllRanges();
          return sel.addRange(range);
        }
      },
      removeAllSelections: function () {
        if (navigator.appName === 'Microsoft Internet Explorer') {
          return range.empty();
        } else {
          return window.getSelection().removeAllRanges();
        }
      },
      getContents: function () {
        var cleanup, contentClone, plugin;
        contentClone = this.element.clone();
        for (plugin in this.options.plugins) {
          cleanup = jQuery(this.element).data('IKS-' + plugin).cleanupContentClone;
          if (!jQuery.isFunction(cleanup)) {
            continue;
          }
          jQuery(this.element)[plugin]('cleanupContentClone', contentClone);
        }
        return contentClone.html();
      },
      setContents: function (contents) {
        return this.element.html(contents);
      },
      isModified: function () {
        if (!this.previousContent) {
          this.previousContent = this.originalContent;
        }
        return this.previousContent !== this.getContents();
      },
      setUnmodified: function () {
        jQuery(this.element).removeClass('isModified');
        return this.previousContent = this.getContents();
      },
      setModified: function () {
        jQuery(this.element).addClass('isModified');
        return this._trigger('modified', null, {
          editable: this,
          content: this.getContents()
        });
      },
      restoreOriginalContent: function () {
        return this.element.html(this.originalContent);
      },
      execute: function (command, value) {
        if (document.execCommand(command, false, value)) {
          return this.element.trigger('change');
        }
      },
      protectFocusFrom: function (el) {
        var _this = this;
        return el.on('mousedown', function (event) {
          event.preventDefault();
          _this._protectToolbarFocus = true;
          return setTimeout(function () {
            return _this._protectToolbarFocus = false;
          }, 300);
        });
      },
      keepActivated: function (_keepActivated) {
        this._keepActivated = _keepActivated;
      },
      _generateUUID: function () {
        var S4;
        S4 = function () {
          return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
        };
        return '' + (S4()) + (S4()) + '-' + (S4()) + '-' + (S4()) + '-' + (S4()) + '-' + (S4()) + (S4()) + (S4());
      },
      _prepareToolbar: function () {
        var defaults, plugin, populate, toolbarOptions;
        this.toolbar = jQuery('<div class="hallotoolbar"></div>').hide();
        if (this.options.toolbarCssClass) {
          this.toolbar.addClass(this.options.toolbarCssClass);
        }
        defaults = {
          editable: this,
          parentElement: this.options.parentElement,
          toolbar: this.toolbar,
          positionAbove: this.options.toolbarPositionAbove
        };
        toolbarOptions = $.extend({}, defaults, this.options.toolbarOptions);
        this.element[this.options.toolbar](toolbarOptions);
        for (plugin in this.options.plugins) {
          populate = jQuery(this.element).data('IKS-' + plugin).populateToolbar;
          if (!jQuery.isFunction(populate)) {
            continue;
          }
          this.element[plugin]('populateToolbar', this.toolbar);
        }
        this.element[this.options.toolbar]('setPosition');
        return this.protectFocusFrom(this.toolbar);
      },
      changeToolbar: function (element, toolbar, hide) {
        var originalToolbar;
        if (hide == null) {
          hide = false;
        }
        originalToolbar = this.options.toolbar;
        this.options.parentElement = element;
        if (toolbar) {
          this.options.toolbar = toolbar;
        }
        if (!this.toolbar) {
          return;
        }
        this.element[originalToolbar]('destroy');
        this.toolbar.remove();
        this._prepareToolbar();
        if (hide) {
          return this.toolbar.hide();
        }
      },
      _checkModified: function (event) {
        var widget;
        widget = event.data;
        if (widget.isModified()) {
          return widget.setModified();
        }
      },
      _keys: function (event) {
        var old, widget;
        widget = event.data;
        if (event.keyCode === 27) {
          old = widget.getContents();
          widget.restoreOriginalContent(event);
          widget._trigger('restored', null, {
            editable: widget,
            content: widget.getContents(),
            thrown: old
          });
          return widget.turnOff();
        }
      },
      _rangesEqual: function (r1, r2) {
        if (r1.startContainer !== r2.startContainer) {
          return false;
        }
        if (r1.startOffset !== r2.startOffset) {
          return false;
        }
        if (r1.endContainer !== r2.endContainer) {
          return false;
        }
        if (r1.endOffset !== r2.endOffset) {
          return false;
        }
        return true;
      },
      _checkSelection: function (event) {
        var widget;
        if (event.keyCode === 27) {
          return;
        }
        widget = event.data;
        return setTimeout(function () {
          var sel;
          sel = widget.getSelection();
          if (widget._isEmptySelection(sel) || widget._isEmptyRange(sel)) {
            if (widget.selection) {
              widget.selection = null;
              widget._trigger('unselected', null, {
                editable: widget,
                originalEvent: event
              });
            }
            return;
          }
          if (!widget.selection || !widget._rangesEqual(sel, widget.selection)) {
            widget.selection = sel.cloneRange();
            return widget._trigger('selected', null, {
              editable: widget,
              selection: widget.selection,
              ranges: [widget.selection],
              originalEvent: event
            });
          }
        }, 0);
      },
      _isEmptySelection: function (selection) {
        if (selection.type === 'Caret') {
          return true;
        }
        return false;
      },
      _isEmptyRange: function (range) {
        if (range.collapsed) {
          return true;
        }
        if (range.isCollapsed) {
          if (typeof range.isCollapsed === 'function') {
            return range.isCollapsed();
          }
          return range.isCollapsed;
        }
        return false;
      },
      turnOn: function () {
        if (this.getContents() === this.options.placeholder) {
          this.setContents('');
        }
        jQuery(this.element).addClass('inEditMode');
        return this._trigger('activated', null, this);
      },
      turnOff: function () {
        jQuery(this.element).removeClass('inEditMode');
        this._trigger('deactivated', null, this);
        if (!this.getContents()) {
          return this.setContents(this.options.placeholder);
        }
      },
      _activated: function (event) {
        return event.data.turnOn();
      },
      _deactivated: function (event) {
        if (event.data._keepActivated) {
          return;
        }
        if (event.data._protectToolbarFocus !== true) {
          return event.data.turnOff();
        } else {
          return setTimeout(function () {
            return jQuery(event.data.element).focus();
          }, 300);
        }
      },
      _forceStructured: function (event) {
        try {
          return document.execCommand('styleWithCSS', 0, false);
        } catch (e) {
          try {
            return document.execCommand('useCSS', 0, true);
          } catch (e) {
            try {
              return document.execCommand('styleWithCSS', false, false);
            } catch (e) {

            }
          }
        }
      },
      checkTouch: function () {
        return this.options.touchScreen = !!('createTouch' in document);
      }
    });
  })(jQuery);
}).call(this);
/*
   A A L        Source code at:
   T C A   <http://www.attacklab.net/>
   T K B
*/

  var Showdown = {};
  Showdown.converter = function () {
  var _1;
  var _2;
  var _3;
  var _4 = 0;
  this.makeHtml = function (_5) {
  _1 = new Array();
  _2 = new Array();
  _3 = new Array();
  _5 = _5.replace(/~/g,'~T');
  _5 = _5.replace(/\$/g,'~D');
  _5 = _5.replace(/\r\n/g,'\n');
  _5 = _5.replace(/\r/g,'\n');
  _5 = "\n\n" + _5+'\n\n';
  _5 = _6(_5);
  _5 = _5.replace(/^[ \t]+$/mg,'');
  _5 = _7(_5);
  _5 = _8(_5);
  _5 = _9(_5);
  _5 = _a(_5);
  _5 = _5.replace(/~D/g,'$$');
  _5 = _5.replace(/~T/g,'~');
  return _5;
};
  var _8 = function (_b) {
  var _b = _b.replace(/^[ ]{0,3}\[(.+)\]:[ \t]*\n?[ \t]*<?(\S+?)>?[ \t]*\n?[ \t]*(?:(\n*)["(](.+?)[")][ \t]*)?(?:\n+|\Z)/gm, function (_c, m1, m2, m3, m4) {
  m1 = m1.toLowerCase();
  _1[m1] = _11(m2);
  if (m3) {
  return m3 + m4;
} else {
  if (m4) {
  _2[m1] = m4.replace(/"/g,'&quot;');
}
}
  return '';
});
  return _b;
};
  var _7 = function (_12) {
  _12 = _12.replace(/\n/g,'\n\n');
  var _13='p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del';
  var _14='p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math';
  _12 = _12.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b[^\r]*?\n<\/\2>[ \t]*(?=\n+))/gm, _15);
  _12 = _12.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math)\b[^\r]*?.*<\/\2>[ \t]*(?=\n+)\n)/gm, _15);
  _12 = _12.replace(/(\n[ ]{0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g, _15);
  _12 = _12.replace(/(\n\n[ ]{0,3}<!(--[^\r]*?--\s*)+>[ \t]*(?=\n{2,}))/g, _15);
  _12 = _12.replace(/(?:\n\n)([ ]{0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g, _15);
  _12 = _12.replace(/\n\n/g,'\n');
  return _12;
};
  var _15 = function (_16, m1) {
  var _18 = m1;
  _18 = _18.replace(/\n\n/g,'\n');
  _18 = _18.replace(/^\n/,'');
  _18 = _18.replace(/\n+$/g,'');
  _18 = "\n\n~K" + (_3.push(_18) - 1)+'K\n\n';
  return _18;
};
  var _9 = function (_19) {
  _19 = _1a(_19);
  var key = _1c('<hr />');
  _19 = _19.replace(/^[ ]{0,2}([ ]?\*[ ]?){3,}[ \t]*$/gm, key);
  _19 = _19.replace(/^[ ]{0,2}([ ]?\-[ ]?){3,}[ \t]*$/gm, key);
  _19 = _19.replace(/^[ ]{0,2}([ ]?\_[ ]?){3,}[ \t]*$/gm, key);
  _19 = _1d(_19);
  _19 = _1e(_19);
  _19 = _1f(_19);
  _19 = _7(_19);
  _19 = _20(_19);
  return _19;
};
  var _21 = function (_22) {
  _22 = _23(_22);
  _22 = _24(_22);
  _22 = _25(_22);
  _22 = _26(_22);
  _22 = _27(_22);
  _22 = _28(_22);
  _22 = _11(_22);
  _22 = _29(_22);
  _22 = _22.replace(/ {2}+\n/g,' <br />\n');
  return _22;
};
  var _24 = function (_2a) {
  var _2b = /(<[a-z\/!$]("[^"]*"|'[^']*'|[^'">])*>|<!(--.*?--\s*)+>)/gi;
  _2a = _2a.replace(_2b, function (_2c) {
  var tag = _2c.replace(/(.)<\/?code>(?=.)/g,'$1`');
  tag = _2e(tag,'\\`*_');
  return tag;
});
  return _2a;
};
  var _27 = function (_2f) {
  _2f = _2f.replace(/(\[((?:\[[^\]]*\]|[^\[\]])*)\][ ]?(?:\n[ ]*)?\[(.*?)\])()()()()/g, _30);
  _2f = _2f.replace(/(\[((?:\[[^\]]*\]|[^\[\]])*)\]\([ \t]*()<?(.*?)>?[ \t]*((['"])(.*?)\6[ \t]*)?\))/g, _30);
  _2f = _2f.replace(/(\[([^\[\]]+)\])()()()()()/g, _30);
  return _2f;
};
  var _30 = function (_31, m1, m2, m3, m4, m5, m6, m7) {
  if (m7 == undefined) {
  m7='';
}
  var _39 = m1;
  var _3a = m2;
  var _3b = m3.toLowerCase();
  var url = m4;
  var _3d = m7;
  if (url=='') {
  if (_3b=='') {
  _3b = _3a.toLowerCase().replace(/ ?\n/g,' ');
}
  url = "#" + _3b;
  if (_1[_3b] != undefined) {
  url = _1[_3b];
  if (_2[_3b] != undefined) {
  _3d = _2[_3b];
}
} else {
  if (_39.search(/\(\s*\)$/m) > -1) {
  url='';
} else {
  return _39;
}
}
}
  url = _2e(url,'*_');
  var _3e = "<a href=\"" + url+'"';
  if (_3d!='') {
  _3d = _3d.replace(/"/g,'&quot;');
  _3d = _2e(_3d,'*_');
  _3e += " title=\"" + _3d+'"';
}
  _3e += ">" + _3a+'</a>';
  return _3e;
};
  var _26 = function (_3f) {
  _3f = _3f.replace(/(!\[(.*?)\][ ]?(?:\n[ ]*)?\[(.*?)\])()()()()/g, _40);
  _3f = _3f.replace(/(!\[(.*?)\]\s?\([ \t]*()<?(\S+?)>?[ \t]*((['"])(.*?)\6[ \t]*)?\))/g, _40);
  return _3f;
};
  var _40 = function (_41, m1, m2, m3, m4, m5, m6, m7) {
  var _49 = m1;
  var _4a = m2;
  var _4b = m3.toLowerCase();
  var url = m4;
  var _4d = m7;
  if (!_4d) {
  _4d='';
}
  if (url=='') {
  if (_4b=='') {
  _4b = _4a.toLowerCase().replace(/ ?\n/g,' ');
}
  url = "#" + _4b;
  if (_1[_4b] != undefined) {
  url = _1[_4b];
  if (_2[_4b] != undefined) {
  _4d = _2[_4b];
}
} else {
  return _49;
}
}
  _4a = _4a.replace(/"/g,'&quot;');
  url = _2e(url,'*_');
  var _4e = "<img src=\"" + url + "\" alt=\"" + _4a+'"';
  _4d = _4d.replace(/"/g,'&quot;');
  _4d = _2e(_4d,'*_');
  _4e += " title=\"" + _4d+'"';
  _4e+=' />';
  return _4e;
};
  var _1a = function (_4f) {
  _4f = _4f.replace(/^(.+)[ \t]*\n=+[ \t]*\n+/gm, function (_50, m1) {
  return _1c("<h1>" + _21(m1)+'</h1>');
});
  _4f = _4f.replace(/^(.+)[ \t]*\n-+[ \t]*\n+/gm, function (_52, m1) {
  return _1c("<h2>" + _21(m1)+'</h2>');
});
  _4f = _4f.replace(/^(\#{1,6})[ \t]*(.+?)[ \t]*\#*\n+/gm, function (_54, m1, m2) {
  var _57 = m1.length;
  return _1c("<h" + _57 + ">" + _21(m2) + "</h" + _57+'>');
});
  return _4f;
};
  var _58;
  var _1d = function (_59) {
  _59+='~0';
  var _5a = /^(([ ]{0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm;
  if (_4) {
  _59 = _59.replace(_5a, function (_5b, m1, m2) {
  var _5e = m1;
  var _5f = (m2.search(/[*+-]/g) > -1)?'ul':'ol';
  _5e = _5e.replace(/\n{2,}/g,'\n\n\n');
  var _60 = _58(_5e);
  _60 = _60.replace(/\s+$/,'');
  _60 = "<" + _5f + ">" + _60 + "</" + _5f+'>\n';
  return _60;
});
} else {
  _5a = /(\n\n|^\n?)(([ ]{0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/g;
  _59 = _59.replace(_5a, function (_61, m1, m2, m3) {
  var _65 = m1;
  var _66 = m2;
  var _67 = (m3.search(/[*+-]/g) > -1)?'ul':'ol';
  var _66 = _66.replace(/\n{2,}/g,'\n\n\n');
  var _68 = _58(_66);
  _68 = _65 + "<" + _67 + ">\n" + _68 + "</" + _67+'>\n';
  return _68;
});
}
  _59 = _59.replace(/~0/,'');
  return _59;
};
  _58 = function (_69) {
  _4++;
  _69 = _69.replace(/\n{2,}$/,'\n');
  _69+='~0';
  _69 = _69.replace(/(\n)?(^[ \t]*)([*+-]|\d+[.])[ \t]+([^\r]+?(\n{1,2}))(?=\n*(~0|\2([*+-]|\d+[.])[ \t]+))/gm, function (_6a, m1, m2, m3, m4) {
  var _6f = m4;
  var _70 = m1;
  var _71 = m2;
  if (_70 || (_6f.search(/\n{2,}/) > -1)) {
  _6f = _9(_72(_6f));
} else {
  _6f = _1d(_72(_6f));
  _6f = _6f.replace(/\n$/,'');
  _6f = _21(_6f);
}
  return "<li>" + _6f+'</li>\n';
});
  _69 = _69.replace(/~0/g,'');
  _4--;
  return _69;
};
  var _1e = function (_73) {
  _73+='~0';
  _73 = _73.replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=~0))/g, function (_74, m1, m2) {
  var _77 = m1;
  var _78 = m2;
  _77 = _79(_72(_77));
  _77 = _6(_77);
  _77 = _77.replace(/^\n+/g,'');
  _77 = _77.replace(/\n+$/g,'');
  _77 = "<pre><code>" + _77+'\n</code></pre>';
  return _1c(_77) + _78;
});
  _73 = _73.replace(/~0/,'');
  return _73;
};
  var _1c = function (_7a) {
  _7a = _7a.replace(/(^\n+|\n+$)/g,'');
  return "\n\n~K" + (_3.push(_7a) - 1)+'K\n\n';
};
  var _23 = function (_7b) {
  _7b = _7b.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm, function (_7c, m1, m2, m3, m4) {
  var c = m3;
  c = c.replace(/^([ \t]*)/g,'');
  c = c.replace(/[ \t]*$/g,'');
  c = _79(c);
  return m1 + "<code>" + c+'</code>';
});
  return _7b;
};
  var _79 = function (_82) {
  _82 = _82.replace(/&/g,'&amp;');
  _82 = _82.replace(/</g,'&lt;');
  _82 = _82.replace(/>/g,'&gt;');
  _82 = _2e(_82,'*_{}[]\\', false);
  return _82;
};
  var _29 = function (_83) {
  _83 = _83.replace(/(\*\*|__)(?=\S)([^\r]*?\S[*_]*)\1/g,'<strong>$2</strong>');
  _83 = _83.replace(/(\*|_)(?=\S)([^\r]*?\S)\1/g,'<em>$2</em>');
  return _83;
};
  var _1f = function (_84) {
  _84 = _84.replace(/((^[ \t]*>[ \t]?.+\n(.+\n)*\n*)+)/gm, function (_85, m1) {
  var bq = m1;
  bq = bq.replace(/^[ \t]*>[ \t]?/gm,'~0');
  bq = bq.replace(/~0/g,'');
  bq = bq.replace(/^[ \t]+$/gm,'');
  bq = _9(bq);
  bq = bq.replace(/(^|\n)/g,'$1  ');
  bq = bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function (_88, m1) {
  var pre = m1;
  pre = pre.replace(/^ {2}/mg,'~0');
  pre = pre.replace(/~0/g,'');
  return pre;
});
  return _1c("<blockquote>\n" + bq+'\n</blockquote>');
});
  return _84;
};
  var _20 = function (_8b) {
  _8b = _8b.replace(/^\n+/g,'');
  _8b = _8b.replace(/\n+$/g,'');
  var _8c = _8b.split(/\n{2,}/g);
  var _8d = new Array();
  var end = _8c.length;
  for (var i = 0; i < end; i++) {
  var str = _8c[i];
  if (str.search(/~K(\d+)K/g) >= 0) {
  _8d.push(str);
} else {
  if (str.search(/\S/) >= 0) {
  str = _21(str);
  str = str.replace(/^([ \t]*)/g,'<p>');
  str+='</p>';
  _8d.push(str);
}
}
}
  end = _8d.length;
  for (var i = 0; i < end; i++) {
  while (_8d[i].search(/~K(\d+)K/) >= 0) {
  var _91 = _3[RegExp.$1];
  _91 = _91.replace(/\$/g,'$$$$');
  _8d[i] = _8d[i].replace(/~K\d+K/, _91);
}
}
  return _8d.join('\n\n');
};
  var _11 = function (_92) {
  _92 = _92.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,'&amp;');
  _92 = _92.replace(/<(?![a-z\/?\$!])/gi,'&lt;');
  return _92;
};
  var _25 = function (_93) {
  _93 = _93.replace(/\\(\\)/g, _94);
  _93 = _93.replace(/\\([`*_{}\[\]()>#+-.!])/g, _94);
  return _93;
};
  var _28 = function (_95) {
  _95 = _95.replace(/<((https?|ftp|dict):[^'">\s]+)>/gi,'<a href="$1">$1</a>');
  _95 = _95.replace(/<(?:mailto:)?([-.\w]+\@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi, function (_96, m1) {
  return _98(_a(m1));
});
  return _95;
};
  var _98 = function (_99) {
  function char2hex (ch) {
  var _9b='0123456789ABCDEF';
  var dec = ch.charCodeAt(0);
  return (_9b.charAt(dec >> 4) + _9b.charAt(dec & 15));
}
  var _9d = [function (ch) {
  return "&#" + ch.charCodeAt(0)+';';
}, function (ch) {
  return "&#x" + char2hex(ch)+';';
}, function (ch) {
  return ch;
}];
  _99 = "mailto:" + _99;
  _99 = _99.replace(/./g, function (ch) {
  if (ch=='@') {
  ch = _9d[Math.floor(Math.random() * 2)](ch);
} else {
  if (ch!=':') {
  var r = Math.random();
  ch = (r > 0.9 ? _9d[2](ch):r > 0.45 ? _9d[1](ch):_9d[0](ch));
}
}
  return ch;
});
  _99 = "<a href=\"" + _99 + "\">" + _99+'</a>';
  _99 = _99.replace(/">.+:/g,'">');
  return _99;
};
  var _a = function (_a3) {
  _a3 = _a3.replace(/~E(\d+)E/g, function (_a4, m1) {
  var _a6 = parseInt(m1);
  return String.fromCharCode(_a6);
});
  return _a3;
};
  var _72 = function (_a7) {
  _a7 = _a7.replace(/^(\t|[ ]{1,4})/gm,'~0');
  _a7 = _a7.replace(/~0/g,'');
  return _a7;
};
  var _6 = function (_a8) {
  _a8 = _a8.replace(/\t(?=\t)/g,'    ');
  _a8 = _a8.replace(/\t/g,'~A~B');
  _a8 = _a8.replace(/~B(.+?)~A/g, function (_a9, m1, m2) {
  var _ac = m1;
  var _ad = 4 - _ac.length % 4;
  for (var i = 0; i < _ad; i++) {
  _ac+=' ';
}
  return _ac;
});
  _a8 = _a8.replace(/~A/g,'    ');
  _a8 = _a8.replace(/~B/g,'');
  return _a8;
};
  var _2e = function (_af, _b0, _b1) {
  var _b2 = "([" + _b0.replace(/([\[\]\\])/g,'\\$1')+'])';
  if (_b1) {
  _b2 = "\\\\" + _b2;
}
  var _b3 = new RegExp(_b2,'g');
  _af = _af.replace(_b3, _94);
  return _af;
};
  var _94 = function (_b4, m1) {
  var _b6 = m1.charCodeAt(0);
  return "~E" + _b6+'E';
};
};
  if (typeof exports != 'undefined')exports.Showdown = Showdown;
/*
 * to-markdown - an HTML to Markdown converter
 *
 * Copyright 2011, Dom Christie
 * Licenced under the MIT licence
 *
 */

  var toMarkdown = function (string) {
  var ELEMENTS = [
    {
      patterns: 'p',
      replacement: function (str, attrs, innerHTML) {
        return innerHTML ? '\n\n' + innerHTML + '\n' : '';
      }
    },
    {
      patterns: 'br',
      type: 'void',
      replacement: '\n'
    },
    {
      patterns: 'h([1-6])',
      replacement: function (str, hLevel, attrs, innerHTML) {
        var hPrefix = '';
        for (var i = 0; i < hLevel; i++) {
          hPrefix += '#';
        }
        return '\n\n' + hPrefix + ' ' + innerHTML + '\n';
      }
    },
    {
      patterns: 'hr',
      type: 'void',
      replacement: '\n\n* * *\n'
    },
    {
      patterns: 'a',
      replacement: function (str, attrs, innerHTML) {
        var href = attrs.match(attrRegExp('href')),
          title = attrs.match(attrRegExp('title'));
        return href ? '[' + innerHTML + ']' + '(' + href[1] + (title && title[1] ? ' "' + title[1] + '"' : '') + ')' : str;
      }
    },
    {
      patterns: ['b', 'strong'],
      replacement: function (str, attrs, innerHTML) {
        return innerHTML ? '**' + innerHTML + '**' : '';
      }
    },
    {
      patterns: ['i', 'em'],
      replacement: function (str, attrs, innerHTML) {
        return innerHTML ? '_' + innerHTML + '_' : '';
      }
    },
    {
      patterns: 'code',
      replacement: function (str, attrs, innerHTML) {
        return innerHTML ? '`' + innerHTML + '`' : '';
      }
    },
    {
      patterns: 'img',
      type: 'void',
      replacement: function (str, attrs, innerHTML) {
        var src = attrs.match(attrRegExp('src')),
          alt = attrs.match(attrRegExp('alt')),
          title = attrs.match(attrRegExp('title'));
        return '![' + (alt && alt[1] ? alt[1] : '') + ']' + '(' + src[1] + (title && title[1] ? ' "' + title[1] + '"' : '') + ')';
      }
    }
  ];

  for (var i = 0, len = ELEMENTS.length; i < len; i++) {
    if (typeof ELEMENTS[i].patterns === 'string') {
      string = replaceEls(string, { tag: ELEMENTS[i].patterns, replacement: ELEMENTS[i].replacement, type: ELEMENTS[i].type });
    }
    else {
      for (var j = 0, pLen = ELEMENTS[i].patterns.length; j < pLen; j++) {
        string = replaceEls(string, { tag: ELEMENTS[i].patterns[j], replacement: ELEMENTS[i].replacement, type: ELEMENTS[i].type });
      }
    }
  }

  function replaceEls (html, elProperties) {
    var pattern = elProperties.type === 'void' ? '<' + elProperties.tag + '\\b([^>]*)\\/?>' : '<' + elProperties.tag + '\\b([^>]*)>([\\s\\S]*?)<\\/' + elProperties.tag + '>',
      regex = new RegExp(pattern, 'gi'),
      markdown = '';
    if (typeof elProperties.replacement === 'string') {
      markdown = html.replace(regex, elProperties.replacement);
    }
    else {
      markdown = html.replace(regex, function (str, p1, p2, p3) {
        return elProperties.replacement.call(this, str, p1, p2, p3);
      });
    }
    return markdown;
  }

  function attrRegExp (attr) {
    return new RegExp(attr + '\\s*=\\s*["\']?([^"\']*)["\']?', 'i');
  }

  // Pre code blocks

  string = string.replace(/<pre\b[^>]*>`([\s\S]*)`<\/pre>/gi, function (str, innerHTML) {
    innerHTML = innerHTML.replace(/^\t+/g, '  '); // convert tabs to spaces (you know it makes sense)
    innerHTML = innerHTML.replace(/\n/g, '\n    ');
    return '\n\n    ' + innerHTML + '\n';
  });

  // Lists

  // Escape numbers that could trigger an ol
  // string = string.replace(/(\d+). /g, '$1\\. ');

  // Converts lists that have no child lists (of same type) first, then works it's way up
  var noChildrenRegex = /<(ul|ol)\b[^>]*>(?:(?!<ul|<ol)[\s\S])*?<\/\1>/gi;
  while (string.match(noChildrenRegex)) {
    string = string.replace(noChildrenRegex, function (str) {
      return replaceLists(str);
    });
  }

  function replaceLists (html) {
    html = html.replace(/<(ul|ol)\b[^>]*>([\s\S]*?)<\/\1>/gi, function (str, listType, innerHTML) {
      var lis = innerHTML.split('</li>');
      lis.splice(lis.length - 1, 1);

      for (i = 0, len = lis.length; i < len; i++) {
        if (lis[i]) {
          var prefix = (listType === 'ol') ? (i + 1) + '.  ' : '*   ';
          lis[i] = lis[i].replace(/\s*<li[^>]*>([\s\S]*)/i, function (str, innerHTML) {
            innerHTML = innerHTML.replace(/^\s+/, '');
            innerHTML = innerHTML.replace(/\n\n/g, '\n\n    ');
            // indent nested lists
            innerHTML = innerHTML.replace(/\n([ ]*)+(\*|\d+\.) /g, '\n$1    $2 ');
            return prefix + innerHTML;
          });
        }
      }
      return lis.join('\n');
    });
    return '\n\n' + html.replace(/[ \t]+\n|\s+$/g, '');
  }

  // Blockquotes
  var deepest = /<blockquote\b[^>]*>((?:(?!<blockquote)[\s\S])*?)<\/blockquote>/gi;
  while (string.match(deepest)) {
    string = string.replace(deepest, function (str) {
      return replaceBlockquotes(str);
    });
  }

  function replaceBlockquotes (html) {
    html = html.replace(/<blockquote\b[^>]*>([\s\S]*?)<\/blockquote>/gi, function (str, inner) {
      inner = inner.replace(/^\s+|\s+$/g, '');
      inner = cleanUp(inner);
      inner = inner.replace(/^/gm, '> ');
      inner = inner.replace(/^(>([ \t]{2,}>)+)/gm, '> >');
      return inner;
    });
    return html;
  }

  function cleanUp (string) {
    string = string.replace(/^[\t\r\n]+|[\t\r\n]+$/g, ''); // trim leading/trailing whitespace
    string = string.replace(/\n\s+\n/g, '\n\n');
    string = string.replace(/\n{3,}/g, '\n\n'); // limit consecutive linebreaks to 2
    return string;
  }

  return cleanUp(string);
};

  if (typeof exports === 'object') {
  exports.toMarkdown = toMarkdown;
}
  // Enable Hallo editor
  jQuery('.post--content').hallo({
    plugins: {
      'halloformat': {},
      'halloheadings': {},
      'hallolists': {},
      'halloreundo': {}
    },
    toolbar: 'halloToolbarFixed'
  });

  var markdownize = function (content) {
    var html = content.split('\n').map($.trim).filter(function (line) {
      return line != '';
    }).join('\n');
    return toMarkdown(html);
  };

  var converter = new Showdown.converter();
  var htmlize = function (content) {
    return converter.makeHtml(content);
  };

  // Method that converts the HTML contents to Markdown
  var showSource = function (content) {
    var markdown = markdownize(content);
    if (jQuery('#source').get(0).value == markdown) {
      return;
    }
    jQuery('#source').get(0).value = markdown;
  };
  var isTyping = false;
  var setLSContent = function (content) {
    console.log('saved!');
    localStorage.setItem('gb_editpost_content', content);
  };
  var delayFunc = function (time, cb) {
    if (isTyping) return;
    isTyping = true;
    setTimeout(function () {
      cb();
      isTyping = false;
    }, time);
  };

  var updateHtml = function (content) {
    if (markdownize(jQuery('.post--content').html()) == content) {
      return;
    }
    var html = htmlize(content);
    jQuery('.post--content').html(html);
    delayFunc(500, function () {
      setLSContent(html);
    });
    // localStorage.setItem("gb_editpost_content", html)
  };

  // Update Markdown every time content is modified
  jQuery('.post--content').bind('hallomodified', function (event, data) {
    showSource(data.content);
    delayFunc(500, function () {
      setLSContent(data.content);
    });
    // localStorage.setItem("gb_editpost_content", data.content)
  });
  jQuery('#source').bind('keyup', function () {
    updateHtml(this.value);
  });
  if (localStorage.getItem('gb_editpost_content')) {
    showSource(localStorage.getItem('gb_editpost_content'));
    updateHtml(localStorage.getItem('gb_editpost_content'));
  } else {
    showSource(jQuery('.post--content').html());
  }
});
