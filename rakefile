require 'rake'
require 'yaml'
class String
	def green; "\033[32m#{"==> " + self}\033[0m" end
	def magenta; "\033[35m#{"==> " + self}\033[0m" end
end

SOURCE = "."
CONFIG = {
	"posts" => File.join(SOURCE, "_posts"),
	"post_ext" => "md",
	:config_file => "_config.yml",
	:s3_bucket => "glossboss.de"
}
yml_cfg = YAML.load_file "#{CONFIG[:config_file]}"
get_version = yml_cfg["cssjsversion"]
def execute(command)
	system "#{command}"
end

desc "Add . and push to git"
task :git do
	puts "push all changes to github".magenta
	#Commit Message
	puts "Commit Message:".magenta
	message = $stdin.gets.chomp
	message += " rake_auto_push"
	execute("git add .")
	execute("git commit -m \"#{message}\"")
	execute("git push github")
	puts "github DONE".green
end

desc "Build all Files for the S3 Push"
task :build_s3 => [:js, :css_scss, :jekyll_build, :gzip, :pushs3] do
	puts "DONE".magenta
end

desc "Builing Jekyll"
task :jekyll_build do
	execute("jekyll build")
end

desc "Push all files in _site/ to the S3 Bucket"
task :pushs3 do
	execute("s3cmd sync -M --acl-public --exclude '*.*' --include '*.jpg' --include '*.ico' --add-header='Cache-Control:max-age=31536000' _site/ s3://#{CONFIG[:s3_bucket]}")
	execute("s3cmd sync -M --acl-public --exclude '*.*' --include '*.js' --include '.*json' --add-header='Cache-Control:max-age=31536000' --add-header='Content-Encoding:gzip' _site/ s3://#{CONFIG[:s3_bucket]} ")
	execute("s3cmd sync -M --acl-public --exclude '*.*' --include '*.html' --add-header='Cache-Control:max-age=86400, must-revalidate' --add-header='Content-Encoding:gzip' _site/ s3://#{CONFIG[:s3_bucket]}")
	execute("s3cmd sync --acl-public --delete-removed _site/ s3://#{CONFIG[:s3_bucket]}")
end

desc "Concatenate all JS Files and UglifyJS them"
task :js do
	puts "JavaScript concatenate & UglifyJS RUNNING".magenta
	files = FileList["js/_*.js"]
	concat_file = "js/global.js"
	open(concat_file, "w") do |output|
		output.puts("document.addEventListener('DOMContentLoaded', function() {")
		files.each do |input|
			output.puts(File.read("#{input}"))
			output.puts("\n")
		end
		output.puts("});")
	end
	execute("uglifyjs js/global.js -o dist/global.#{yml_cfg["cssjsversion"]}.js")
	puts "JavaScript concatenate & UglifyJS DONE".green
end

desc "gzip all the things!"
task :gzip do
	# ATTENTION! Only run GZIP in the generated _site/ folder!
	puts "GZIP HTML Files".magenta
	execute("find _site/ -iname '*.html' -exec gzip -9 -n {} \\; -exec mv {}.gz {} \\;")
	puts "GZIP JSON Files".magenta
	execute("find _site/ -iname '*.json' -exec gzip -9 -n {} \\; -exec mv {}.gz {} \\;")
	puts "GZIP JavaScript Files".magenta
	execute("find _site/ -iname '*.js' -exec gzip -9 -n {} \\; -exec mv {}.gz {} \\;")
end

desc "Build SCSS and run autoprefixer"
task :css_scss do
	puts "SCSS & Autoprefixer RUNNING".magenta
	execute("sass --style=compressed --sourcemap=none _sass/inline_layout.scss dist/inline_layout.css")
	execute("autoprefixer dist/inline_layout.css -o _includes/inline_layout.css")
	puts "SCSS & Autoprefixer DONE".green
end

desc "Build Jekyll and run the Server"
task :jekyll_dev do
	puts "Building Jekyll and running server".magenta
	execute("jekyll serve --config #{CONFIG[:config_file]}")
end

desc "Task for developement"
task :dev => [:css_scss, :js, :jekyll_dev] do
	puts "Done with all Tasks".green
end

desc "Run the SCSS/JS build scripts"
task :build => [:css_scss, :js] do
	puts "Ready to deploy!".green
end

desc "AWS S3 Deploy Task - build all files, commit changes, gzip and push"
task :deploy do
	#Increase Version?
	puts "Increase Version? (leave empty for NO)".magenta
	inc_ver = $stdin.gets.chomp
	unless inc_ver.empty?
		Rake::Task[:inc].invoke 
	end
	Rake::Task[:git].invoke
	Rake::Task[:css_scss].invoke
	Rake::Task[:js].invoke
	Rake::Task[:jekyll_build].invoke
	Rake::Task[:gzip].invoke
	Rake::Task[:pushs3].invoke
end

desc "auto increase Versionnumber"
task :inc do
	execute("mv posts.#{get_version}.json posts.#{get_version+1}.json")
	execute("mv dist/global.#{get_version}.js dist/global.#{get_version+1}.js")
	yml_cfg["cssjsversion"] += 1
	puts "Increased #{yml_cfg["cssjsversion"]-1} => #{yml_cfg["cssjsversion"]}".magenta
	File.open("#{CONFIG[:config_file]}", "w") { |f| YAML.dump(yml_cfg, f)}
end

desc "Create a new Post"
task :newpost do 
	puts 'Begin to create a new Post'
	puts 'But first, let me ask you a few questions'
	puts 'Title?'
	title = $stdin.gets.chomp
	puts 'Author?'
	author = $stdin.gets.chomp
	puts 'Category?'
	cat = $stdin.gets.chomp
	puts 'Subtitle?'
	subtitle = $stdin.gets.chomp
	slug = title.downcase.strip.gsub(' ', '-').gsub(/[^\w-]/, '')
	filename = File.join(
		CONFIG['posts'],
		"#{Time.now.strftime('%Y-%m-%d')}-#{slug}.#{CONFIG["post_ext"]}"
	)
	if File.exist?(filename)
		abort("aborted!") if ask('#{filename} already exist. Do you want to override it?', ['y', 'n']) == 'n'
	end
	puts "Creating new File: #{filename}"
	open(filename, 'w') do |post|
		post.puts '---'
		post.puts "layout: post"
		post.puts "title: \"#{title.gsub(/-/,' ')}\""
		post.puts "author: \"#{author}\""
		post.puts "wps_subtitle: #{subtitle}"
		post.puts "categories: #{cat}"
		post.puts "head__img--fullurl: https://glossbossimages.s3.eu-central-1.amazonaws.com/"
		post.puts "markasnew: true"
		post.puts '---'
	end
	execute("sublime #{filename}")
	
end
